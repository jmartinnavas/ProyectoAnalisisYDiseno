
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Models;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SyntacticAnalyzer extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public SyntacticAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SyntacticAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\002\013\000\002\002" +
    "\013\000\002\002\012\000\002\002\012\000\002\002\012" +
    "\000\002\002\012\000\002\002\011\000\002\002\011\000" +
    "\002\002\014\000\002\002\014\000\002\002\013\000\002" +
    "\002\013\000\002\002\013\000\002\002\013\000\002\002" +
    "\012\000\002\002\012\000\002\003\007\000\002\003\005" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\012\005\000\002\012\003\000\002\012\005\000\002" +
    "\012\007\000\002\012\005\000\002\011\003\000\002\011" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\010\006\000\002\010\007\000\002\010\007\000\002" +
    "\010\012\000\002\013\003\000\002\004\003\000\002\005" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\006\004\004\005\005\001\002\000\004\106" +
    "\110\001\002\000\004\106\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\065\011\001" +
    "\002\000\012\016\013\017\014\020\015\066\017\001\002" +
    "\000\016\006\054\007\056\010\052\011\047\012\055\106" +
    "\046\001\002\000\016\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\106\uffee\001\002\000\016\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\106\uffed\001\002\000\016\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\012\uffec\106\uffec\001\002\000" +
    "\004\066\034\001\002\000\006\067\021\106\022\001\002" +
    "\000\004\067\030\001\002\000\004\106\024\001\002\000" +
    "\004\067\uffd9\001\002\000\004\070\026\001\002\000\004" +
    "\106\025\001\002\000\004\070\uffd8\001\002\000\010\002" +
    "\ufffa\004\004\005\005\001\002\000\004\002\ufff2\001\002" +
    "\000\004\106\024\001\002\000\004\070\032\001\002\000" +
    "\010\002\ufffe\004\004\005\005\001\002\000\004\002\ufff6" +
    "\001\002\000\006\067\036\106\022\001\002\000\004\067" +
    "\042\001\002\000\004\106\024\001\002\000\004\070\040" +
    "\001\002\000\010\002\ufffc\004\004\005\005\001\002\000" +
    "\004\002\ufff4\001\002\000\004\106\024\001\002\000\004" +
    "\070\044\001\002\000\010\002\000\004\004\005\005\001" +
    "\002\000\004\002\ufff8\001\002\000\004\106\uffda\001\002" +
    "\000\004\106\uffe3\001\002\000\004\106\uffe6\001\002\000" +
    "\004\106\uffdf\001\002\000\004\106\uffe2\001\002\000\004" +
    "\106\uffe5\001\002\000\004\106\uffe1\001\002\000\004\106" +
    "\uffe0\001\002\000\004\106\uffe4\001\002\000\004\106\060" +
    "\001\002\000\010\066\uffef\071\061\073\062\001\002\000" +
    "\010\072\065\104\064\106\066\001\002\000\010\016\013" +
    "\017\014\020\015\001\002\000\004\066\ufff0\001\002\000" +
    "\004\072\107\001\002\000\006\064\070\106\uffde\001\002" +
    "\000\004\072\067\001\002\000\004\106\uffdc\001\002\000" +
    "\004\067\071\001\002\000\010\104\072\106\075\107\074" +
    "\001\002\000\006\070\uffea\073\105\001\002\000\004\070" +
    "\104\001\002\000\004\106\100\001\002\000\004\073\076" +
    "\001\002\000\010\104\072\106\075\107\074\001\002\000" +
    "\004\070\uffe7\001\002\000\004\107\101\001\002\000\006" +
    "\070\uffe9\073\102\001\002\000\010\104\072\106\075\107" +
    "\074\001\002\000\004\070\uffe8\001\002\000\004\106\uffdb" +
    "\001\002\000\010\104\072\106\075\107\074\001\002\000" +
    "\004\070\uffeb\001\002\000\004\106\uffdd\001\002\000\004" +
    "\065\111\001\002\000\012\016\013\017\014\020\015\066" +
    "\113\001\002\000\004\066\125\001\002\000\006\067\115" +
    "\106\022\001\002\000\004\067\121\001\002\000\004\106" +
    "\024\001\002\000\004\070\117\001\002\000\010\002\ufff9" +
    "\004\004\005\005\001\002\000\004\002\ufff1\001\002\000" +
    "\004\106\024\001\002\000\004\070\123\001\002\000\010" +
    "\002\ufffd\004\004\005\005\001\002\000\004\002\ufff5\001" +
    "\002\000\006\067\127\106\022\001\002\000\004\067\133" +
    "\001\002\000\004\106\024\001\002\000\004\070\131\001" +
    "\002\000\010\002\ufffb\004\004\005\005\001\002\000\004" +
    "\002\ufff3\001\002\000\004\106\024\001\002\000\004\070" +
    "\135\001\002\000\010\002\uffff\004\004\005\005\001\002" +
    "\000\004\002\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\015\006\011\001\001\000\012\007" +
    "\056\010\047\011\050\013\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\017\001\001\000\002\001\001\000\004\005\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\026\001\001\000\002" +
    "\001\001\000\004\005\030\001\001\000\002\001\001\000" +
    "\004\002\032\001\001\000\002\001\001\000\004\004\034" +
    "\001\001\000\002\001\001\000\004\005\036\001\001\000" +
    "\002\001\001\000\004\002\040\001\001\000\002\001\001" +
    "\000\004\005\042\001\001\000\002\001\001\000\004\002" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\062\006\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\111\006\011\001\001\000\002" +
    "\001\001\000\004\004\113\001\001\000\002\001\001\000" +
    "\004\005\115\001\001\000\002\001\001\000\004\002\117" +
    "\001\001\000\002\001\001\000\004\005\121\001\001\000" +
    "\002\001\001\000\004\002\123\001\001\000\002\001\001" +
    "\000\004\004\125\001\001\000\002\001\001\000\004\005" +
    "\127\001\001\000\002\001\001\000\004\002\131\001\001" +
    "\000\002\001\001\000\004\005\133\001\001\000\002\001" +
    "\001\000\004\002\135\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntacticAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntacticAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticAnalyzer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String result="";
    String temporal = "" ; 
    String temporal2="";
    String temporal3="";
    String temporalvalor="";
    String envget="false";
    String enviaset="false";
    String hereda="";
    String guardo="";
    String consulta="";
    String valorsigno="";
    String valoracceder="";
    String valoraccederid="";
    String serialcondicion="";
    String insertarvalores="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        result +="\n!!!!!!! Error Sintactico Recuperado !!!!!!!\t\tLexema: "+lexema+"\t\tFila: "+fila+"\t\tColumna: "+columna;
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        result +="\n!!!!!!! Error Sintactico, Panic Mode !!!!!!!\t\tLexema: "+lexema+"\t\tFila: "+fila+"\t\tColumna: "+columna;
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SyntacticAnalyzer$actions {



  private final SyntacticAnalyzer parser;

  /** Constructor */
  CUP$SyntacticAnalyzer$actions(SyntacticAnalyzer parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntacticAnalyzer$do_action_part00000000(
    int                        CUP$SyntacticAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticAnalyzer$parser,
    java.util.Stack            CUP$SyntacticAnalyzer$stack,
    int                        CUP$SyntacticAnalyzer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntacticAnalyzer$parser.done_parsing();
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= procedure id parentesis_abierto ARGUMENTOS parentesis_cerrado DEFVARIABLES llave_abierta CUERPITO llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= function id parentesis_abierto ARGUMENTOS parentesis_cerrado DEFVARIABLES llave_abierta CUERPITO llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= procedure id parentesis_abierto parentesis_cerrado DEFVARIABLES llave_abierta CUERPITO llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= function id parentesis_abierto parentesis_cerrado DEFVARIABLES llave_abierta CUERPITO llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= procedure id parentesis_abierto ARGUMENTOS parentesis_cerrado llave_abierta CUERPITO llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= function id parentesis_abierto ARGUMENTOS parentesis_cerrado llave_abierta CUERPITO llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= procedure id parentesis_abierto parentesis_cerrado llave_abierta CUERPITO llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= function id parentesis_abierto parentesis_cerrado llave_abierta CUERPITO llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= procedure id parentesis_abierto ARGUMENTOS parentesis_cerrado DEFVARIABLES llave_abierta CUERPITO llave_cerrada INICIO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-9)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= function id parentesis_abierto ARGUMENTOS parentesis_cerrado DEFVARIABLES llave_abierta CUERPITO llave_cerrada INICIO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-9)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= procedure id parentesis_abierto parentesis_cerrado DEFVARIABLES llave_abierta CUERPITO llave_cerrada INICIO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= function id parentesis_abierto parentesis_cerrado DEFVARIABLES llave_abierta CUERPITO llave_cerrada INICIO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO ::= procedure id parentesis_abierto ARGUMENTOS parentesis_cerrado llave_abierta CUERPITO llave_cerrada INICIO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INICIO ::= function id parentesis_abierto ARGUMENTOS parentesis_cerrado llave_abierta CUERPITO llave_cerrada INICIO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO ::= procedure id parentesis_abierto parentesis_cerrado llave_abierta CUERPITO llave_cerrada INICIO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INICIO ::= function id parentesis_abierto parentesis_cerrado llave_abierta CUERPITO llave_cerrada INICIO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARGUMENTOS ::= REFERENCIA TIPODATO id coma ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARGUMENTOS ::= REFERENCIA TIPODATO id 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // REFERENCIA ::= parametro_entrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("REFERENCIA",4, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // REFERENCIA ::= parametro_salida 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("REFERENCIA",4, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // REFERENCIA ::= parametro_entada_salida 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("REFERENCIA",4, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELEMENTOS ::= entero coma ELEMENTOS 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELEMENTOS ::= entero 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELEMENTOS ::= comilla id comilla 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELEMENTOS ::= comilla id comilla coma ELEMENTOS 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELEMENTOS ::= id coma ELEMENTOS 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ESTRUCTURA ::= VECTOR 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ESTRUCTURA ::= MATRIZ 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPODATO ::= int_type 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPODATO ::= char_type 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPODATO ::= float_type 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPODATO ::= boolean_type 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPODATO ::= string_type 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPODATO ::= ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VECTOR ::= TIPODATO id corchete_abierto corchete_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VECTOR",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VECTOR ::= TIPODATO id corchete_abierto entero corchete_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VECTOR",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VECTOR ::= TIPODATO id corchete_abierto id corchete_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VECTOR",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VECTOR ::= TIPODATO id corchete_abierto corchete_cerrado asignacion llave_abierta ELEMENTOS llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VECTOR",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MATRIZ ::= id 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MATRIZ",9, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DEFVARIABLES ::= id 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DEFVARIABLES",2, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CUERPITO ::= id id 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CUERPITO",3, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntacticAnalyzer$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticAnalyzer$do_action(
    int                        CUP$SyntacticAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticAnalyzer$parser,
    java.util.Stack            CUP$SyntacticAnalyzer$stack,
    int                        CUP$SyntacticAnalyzer$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticAnalyzer$do_action_part00000000(
                               CUP$SyntacticAnalyzer$act_num,
                               CUP$SyntacticAnalyzer$parser,
                               CUP$SyntacticAnalyzer$stack,
                               CUP$SyntacticAnalyzer$top);
    }
}

}
