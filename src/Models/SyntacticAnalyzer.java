
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Models;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SyntacticAnalyzer extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public SyntacticAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SyntacticAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\013\000\002\003\012\000\002\003\011" +
    "\000\002\003\012\000\002\003\013\000\002\003\012\000" +
    "\002\003\012\000\002\003\011\000\002\003\014\000\002" +
    "\003\013\000\002\003\013\000\002\003\012\000\002\003" +
    "\003\000\002\040\004\000\002\040\004\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\004\000\002\040\003\000\002" +
    "\022\003\000\002\022\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\026\003\000\002\026\004" +
    "\000\002\004\006\000\002\004\005\000\002\004\005\000" +
    "\002\004\006\000\002\004\005\000\002\004\006\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\014" +
    "\003\000\002\014\004\000\002\015\004\000\002\015\003" +
    "\000\002\015\005\000\002\015\006\000\002\015\003\000" +
    "\002\015\003\000\002\015\004\000\002\015\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\011\005\000\002\011\006" +
    "\000\002\011\006\000\002\011\011\000\002\016\007\000" +
    "\002\016\011\000\002\016\011\000\002\016\011\000\002" +
    "\016\011\000\002\005\003\000\002\005\004\000\002\013" +
    "\004\000\002\036\004\000\002\036\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\005\000\002\035\005\000" +
    "\002\035\003\000\002\035\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\030\003\000\002\030\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\037" +
    "\004\000\002\037\004\000\002\037\004\000\002\041\010" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\003\000\002\023\006\000\002\032\015\000\002" +
    "\032\015\000\002\032\015\000\002\032\011\000\002\032" +
    "\010\000\002\034\011\000\002\034\013\000\002\034\011" +
    "\000\002\034\005\000\002\027\003\000\002\027\004\000" +
    "\002\033\007\000\002\033\007\000\002\033\007\000\002" +
    "\033\003\000\002\020\007\000\002\020\011\000\002\020" +
    "\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0116\000\042\004\013\005\014\006\020\007\015\010" +
    "\016\011\005\012\004\051\010\053\006\056\011\062\021" +
    "\063\023\064\027\066\025\076\007\100\030\001\002\000" +
    "\006\063\uffca\066\uffca\001\002\000\006\063\uffcd\066\uffcd" +
    "\001\002\000\044\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\051\uffe9\053\uffe9\056\uffe9" +
    "\062\uffe9\063\uffe9\064\uffe9\066\uffe9\076\uffe9\100\uffe9\001" +
    "\002\000\100\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\010\uffe4\011\uffe4\012\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\027\uffe4\051\uffe4\052\uffe4\053\uffe4\055\uffe4" +
    "\056\uffe4\057\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\066" +
    "\uffe4\067\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4\100\uffe4" +
    "\001\002\000\044\002\uffec\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\012\uffec\051\uffec\053\uffec\056\uffec" +
    "\062\uffec\063\uffec\064\uffec\066\uffec\076\uffec\100\uffec\001" +
    "\002\000\044\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\051\uffed\053\uffed\056\uffed\062" +
    "\uffed\063\uffed\064\uffed\066\uffed\076\uffed\100\uffed\001\002" +
    "\000\004\002\u0118\001\002\000\004\066\375\001\002\000" +
    "\004\066\126\001\002\000\006\063\uffce\066\uffce\001\002" +
    "\000\006\063\uffcc\066\uffcc\001\002\000\044\002\uffee\004" +
    "\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee" +
    "\051\uffee\053\uffee\056\uffee\062\uffee\063\uffee\064\uffee\066" +
    "\uffee\076\uffee\100\uffee\001\002\000\006\063\uffcb\066\uffcb" +
    "\001\002\000\100\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\027\uffe6\051\uffe6\052\uffe6\053\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6" +
    "\066\uffe6\067\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100" +
    "\uffe6\001\002\000\044\002\uffef\004\uffef\005\uffef\006\uffef" +
    "\007\uffef\010\uffef\011\uffef\012\uffef\051\uffef\053\uffef\056" +
    "\uffef\062\uffef\063\uffef\064\uffef\066\uffef\076\uffef\100\uffef" +
    "\001\002\000\112\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\027\uffe7\047" +
    "\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7" +
    "\057\uffe7\062\uffe7\063\uffe7\064\uffe7\066\uffe7\067\uffe7\070" +
    "\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7\100\uffe7\001\002" +
    "\000\044\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\051\ufff2\053\ufff2\056\ufff2\062\ufff2" +
    "\063\ufff2\064\ufff2\066\ufff2\076\ufff2\100\ufff2\001\002\000" +
    "\050\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\050\125\051\uffe8\053\uffe8\054\uffe8\056" +
    "\uffe8\062\uffe8\063\uffe8\064\uffe8\066\uffe8\076\uffe8\100\uffe8" +
    "\001\002\000\006\063\064\066\071\001\002\000\100\002" +
    "\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\027" +
    "\uffe5\051\uffe5\052\uffe5\053\uffe5\055\uffe5\056\uffe5\057\uffe5" +
    "\061\uffe5\062\uffe5\063\uffe5\064\uffe5\066\uffe5\067\uffe5\074" +
    "\uffe5\075\uffe5\076\uffe5\077\uffe5\100\uffe5\001\002\000\004" +
    "\052\063\001\002\000\046\002\uffeb\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\051\uffeb\053\uffeb" +
    "\054\034\056\uffeb\062\uffeb\063\uffeb\064\uffeb\066\uffeb\076" +
    "\uffeb\100\uffeb\001\002\000\044\002\000\004\013\005\014" +
    "\006\020\007\015\010\016\011\005\012\004\051\010\053" +
    "\006\056\011\062\021\063\023\064\027\066\025\076\007" +
    "\100\030\001\002\000\004\002\uffff\001\002\000\016\055" +
    "\037\062\021\063\023\064\027\066\040\076\007\001\002" +
    "\000\004\055\062\001\002\000\004\055\061\001\002\000" +
    "\112\002\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9" +
    "\011\uffc9\012\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022" +
    "\uffc9\027\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9" +
    "\043\uffc9\046\uffc9\047\041\051\uffc9\052\uffc9\053\uffc9\056" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\066\uffc9\067\uffc9\074\uffc9" +
    "\075\uffc9\076\uffc9\077\uffc9\100\uffc9\001\002\000\070\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\027\uffe8\047\uffe8\051\uffe8\052\uffe8\053\uffe8\054" +
    "\uffe8\055\uffe8\056\uffe8\057\uffe8\062\uffe8\063\uffe8\064\uffe8" +
    "\066\uffe8\067\uffe8\070\uffe8\074\uffe8\075\uffe8\076\uffe8\077" +
    "\uffe8\001\002\000\004\052\042\001\002\000\016\062\021" +
    "\063\023\064\027\066\040\067\043\076\007\001\002\000" +
    "\006\063\023\066\040\001\002\000\022\051\uffd8\053\uffd8" +
    "\062\021\063\023\064\027\066\040\067\043\076\007\001" +
    "\002\000\024\051\uffd1\053\uffd1\056\054\062\uffd1\063\uffd1" +
    "\064\uffd1\066\uffd1\067\uffd1\076\uffd1\001\002\000\004\053" +
    "\053\001\002\000\026\051\uffd2\053\uffd2\054\034\056\052" +
    "\062\uffd2\063\uffd2\064\uffd2\066\uffd2\067\uffd2\076\uffd2\001" +
    "\002\000\024\051\uffd5\053\uffd5\056\051\062\uffd5\063\uffd5" +
    "\064\uffd5\066\uffd5\067\uffd5\076\uffd5\001\002\000\022\051" +
    "\uffd6\053\uffd6\062\uffd6\063\uffd6\064\uffd6\066\uffd6\067\uffd6" +
    "\076\uffd6\001\002\000\022\051\uffcf\053\uffcf\062\uffcf\063" +
    "\uffcf\064\uffcf\066\uffcf\067\uffcf\076\uffcf\001\002\000\116" +
    "\002\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011" +
    "\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\027\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\043\uffc6\046\uffc6\051\uffc6\052\uffc6" +
    "\053\uffc6\056\uffc6\062\uffc6\063\uffc6\064\uffc6\066\uffc6\067" +
    "\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\001\002" +
    "\000\022\051\uffd0\053\uffd0\062\uffd0\063\uffd0\064\uffd0\066" +
    "\uffd0\067\uffd0\076\uffd0\001\002\000\006\051\uffd7\053\uffd7" +
    "\001\002\000\004\070\057\001\002\000\024\051\uffd4\053" +
    "\uffd4\056\060\062\uffd4\063\uffd4\064\uffd4\066\uffd4\067\uffd4" +
    "\076\uffd4\001\002\000\022\051\uffd3\053\uffd3\062\uffd3\063" +
    "\uffd3\064\uffd3\066\uffd3\067\uffd3\076\uffd3\001\002\000\110" +
    "\002\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\027\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\043" +
    "\uffc8\046\uffc8\051\uffc8\052\uffc8\053\uffc8\056\uffc8\062\uffc8" +
    "\063\uffc8\064\uffc8\066\uffc8\067\uffc8\074\uffc8\075\uffc8\076" +
    "\uffc8\077\uffc8\100\uffc8\001\002\000\110\002\uffc7\004\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\027\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\043\uffc7\046\uffc7\051" +
    "\uffc7\052\uffc7\053\uffc7\056\uffc7\062\uffc7\063\uffc7\064\uffc7" +
    "\066\uffc7\067\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\100" +
    "\uffc7\001\002\000\044\002\ufff1\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\051\ufff1\053\ufff1\056" +
    "\ufff1\062\ufff1\063\ufff1\064\ufff1\066\ufff1\076\ufff1\100\ufff1" +
    "\001\002\000\052\002\uffba\004\uffba\005\uffba\006\uffba\007" +
    "\uffba\010\uffba\011\uffba\012\uffba\047\123\051\uffba\052\uffba" +
    "\053\uffba\054\uffe7\056\uffba\062\uffba\063\uffba\064\uffba\066" +
    "\uffba\076\uffba\100\uffba\001\002\000\046\002\uffb6\004\uffb6" +
    "\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\056\uffb6\062\uffb6\063\uffb6\064\uffb6" +
    "\066\uffb6\076\uffb6\100\uffb6\001\002\000\044\002\uffea\004" +
    "\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea" +
    "\051\uffea\053\uffea\056\uffea\062\uffea\063\uffea\064\uffea\066" +
    "\uffea\076\uffea\100\uffea\001\002\000\004\054\101\001\002" +
    "\000\046\002\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\051\uffb7\052\uffb7\053\uffb7\056\uffb7" +
    "\062\uffb7\063\uffb7\064\uffb7\066\uffb7\076\uffb7\100\uffb7\001" +
    "\002\000\052\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb" +
    "\010\uffbb\011\uffbb\012\uffbb\047\072\051\uffbb\052\uffbb\053" +
    "\uffbb\054\uffe8\056\uffbb\062\uffbb\063\uffbb\064\uffbb\066\uffbb" +
    "\076\uffbb\100\uffbb\001\002\000\014\062\074\063\073\064" +
    "\076\065\075\066\100\001\002\000\104\002\uffb1\004\uffb1" +
    "\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\016" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\033\uffb1\034\uffb1\042\uffb1\051\uffb1\052" +
    "\uffb1\053\uffb1\056\uffb1\062\uffb1\063\uffb1\064\uffb1\066\uffb1" +
    "\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\001\002\000" +
    "\122\002\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5" +
    "\011\uffb5\012\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\046\uffb5\051\uffb5\052\uffb5\053\uffb5\056\uffb5\062\uffb5" +
    "\063\uffb5\064\uffb5\066\uffb5\074\uffb5\075\uffb5\076\uffb5\077" +
    "\uffb5\100\uffb5\001\002\000\122\002\uffb4\004\uffb4\005\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\022\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\046\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\056\uffb4\062\uffb4\063\uffb4\064\uffb4\066\uffb4\074" +
    "\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4\001\002\000\122" +
    "\002\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3" +
    "\046\uffb3\051\uffb3\052\uffb3\053\uffb3\056\uffb3\062\uffb3\063" +
    "\uffb3\064\uffb3\066\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3" +
    "\100\uffb3\001\002\000\046\002\uffb9\004\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\056\uffb9\062\uffb9\063\uffb9\064\uffb9\066\uffb9\076" +
    "\uffb9\100\uffb9\001\002\000\104\002\uffb2\004\uffb2\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\016\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\034\uffb2\042\uffb2\051\uffb2\052\uffb2\053" +
    "\uffb2\056\uffb2\062\uffb2\063\uffb2\064\uffb2\066\uffb2\074\uffb2" +
    "\075\uffb2\076\uffb2\077\uffb2\100\uffb2\001\002\000\016\055" +
    "\104\062\021\063\023\064\027\066\040\076\007\001\002" +
    "\000\004\055\115\001\002\000\004\055\107\001\002\000" +
    "\060\002\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\047\041\051" +
    "\uffc9\052\uffc9\053\uffc9\054\105\056\uffc9\062\uffc9\063\uffc9" +
    "\064\uffc9\066\uffc9\076\uffc9\100\uffc9\001\002\000\004\055" +
    "\106\001\002\000\054\002\uffc5\004\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\051\uffc5\052\uffc5\053\uffc5\056\uffc5\062\uffc5\063\uffc5" +
    "\064\uffc5\066\uffc5\076\uffc5\100\uffc5\001\002\000\056\002" +
    "\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8" +
    "\012\uffc8\013\uffc8\014\uffc8\015\uffc8\051\uffc8\052\uffc8\053" +
    "\uffc8\054\110\056\uffc8\062\uffc8\063\uffc8\064\uffc8\066\uffc8" +
    "\076\uffc8\100\uffc8\001\002\000\014\062\021\063\023\064" +
    "\027\066\040\076\007\001\002\000\004\055\114\001\002" +
    "\000\004\055\113\001\002\000\054\002\uffc3\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\015\uffc3\051\uffc3\052\uffc3\053\uffc3\056\uffc3\062" +
    "\uffc3\063\uffc3\064\uffc3\066\uffc3\076\uffc3\100\uffc3\001\002" +
    "\000\054\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010" +
    "\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\056\uffc2\062\uffc2\063\uffc2\064\uffc2\066" +
    "\uffc2\076\uffc2\100\uffc2\001\002\000\056\002\uffc7\004\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\051\uffc7\052\uffc7\053\uffc7\054\116" +
    "\056\uffc7\062\uffc7\063\uffc7\064\uffc7\066\uffc7\076\uffc7\100" +
    "\uffc7\001\002\000\014\062\021\063\023\064\027\066\040" +
    "\076\007\001\002\000\004\055\122\001\002\000\004\055" +
    "\121\001\002\000\054\002\uffc1\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\051\uffc1\052\uffc1\053\uffc1\056\uffc1\062\uffc1\063\uffc1" +
    "\064\uffc1\066\uffc1\076\uffc1\100\uffc1\001\002\000\054\002" +
    "\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\015\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\056\uffc4\062\uffc4\063\uffc4\064\uffc4\066\uffc4\076\uffc4" +
    "\100\uffc4\001\002\000\014\062\074\063\073\064\076\065" +
    "\075\066\100\001\002\000\046\002\uffb8\004\uffb8\005\uffb8" +
    "\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\051\uffb8\052" +
    "\uffb8\053\uffb8\056\uffb8\062\uffb8\063\uffb8\064\uffb8\066\uffb8" +
    "\076\uffb8\100\uffb8\001\002\000\044\002\ufff0\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\051\ufff0" +
    "\053\ufff0\056\ufff0\062\ufff0\063\ufff0\064\ufff0\066\ufff0\076" +
    "\ufff0\100\ufff0\001\002\000\004\050\127\001\002\000\012" +
    "\013\131\014\132\015\135\051\136\001\002\000\014\006" +
    "\020\007\015\010\016\011\005\012\004\001\002\000\014" +
    "\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\001\002\000" +
    "\014\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\001\002" +
    "\000\004\051\356\001\002\000\012\013\131\014\132\015" +
    "\135\051\uffe3\001\002\000\014\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\001\002\000\016\006\020\007\015\010" +
    "\016\011\005\012\004\052\137\001\002\000\032\016\170" +
    "\017\163\020\171\021\172\022\164\027\151\052\165\063" +
    "\023\066\040\074\161\075\152\077\166\001\002\000\004" +
    "\052\147\001\002\000\006\063\064\066\071\001\002\000" +
    "\016\006\020\007\015\010\016\011\005\012\004\052\uffc0" +
    "\001\002\000\004\052\uffbf\001\002\000\022\006\uffbc\007" +
    "\uffbc\010\uffbc\011\uffbc\012\uffbc\052\uffbc\063\uffbc\066\uffbc" +
    "\001\002\000\022\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012" +
    "\uffbe\052\uffbe\063\064\066\071\001\002\000\022\006\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\012\uffbd\052\uffbd\063\uffbd\066" +
    "\uffbd\001\002\000\032\016\170\017\163\020\171\021\172" +
    "\022\164\027\151\052\165\063\023\066\040\074\161\075" +
    "\152\077\166\001\002\000\032\016\170\017\163\020\171" +
    "\021\172\022\164\027\151\052\165\063\023\066\040\074" +
    "\161\075\152\077\166\001\002\000\004\066\350\001\002" +
    "\000\004\067\345\001\002\000\004\053\344\001\002\000" +
    "\032\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\027\uff9b" +
    "\052\uff9b\063\uff9b\066\uff9b\074\uff9b\075\uff9b\077\uff9b\001" +
    "\002\000\032\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d" +
    "\027\uff9d\052\uff9d\063\uff9d\066\uff9d\074\uff9d\075\uff9d\077" +
    "\uff9d\001\002\000\032\016\uff99\017\uff99\020\uff99\021\uff99" +
    "\022\uff99\027\uff99\052\uff99\063\uff99\066\uff99\074\uff99\075" +
    "\uff99\077\uff99\001\002\000\032\016\uff9e\017\uff9e\020\uff9e" +
    "\021\uff9e\022\uff9e\027\uff9e\052\uff9e\063\uff9e\066\uff9e\074" +
    "\uff9e\075\uff9e\077\uff9e\001\002\000\032\016\uff9a\017\uff9a" +
    "\020\uff9a\021\uff9a\022\uff9a\027\uff9a\052\uff9a\063\uff9a\066" +
    "\uff9a\074\uff9a\075\uff9a\077\uff9a\001\002\000\046\016\uffa0" +
    "\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\025\uffa0\026" +
    "\uffa0\027\uffa0\052\uffa0\053\uffa0\063\uffa0\066\uffa0\071\uffa0" +
    "\073\uffa0\074\uffa0\075\uffa0\077\uffa0\001\002\000\032\016" +
    "\uff90\017\uff90\020\uff90\021\uff90\022\uff90\027\uff90\052\uff90" +
    "\063\uff90\066\uff90\074\uff90\075\uff90\077\uff90\001\002\000" +
    "\004\050\336\001\002\000\004\066\330\001\002\000\004" +
    "\066\323\001\002\000\014\062\021\063\023\064\027\066" +
    "\040\076\007\001\002\000\032\016\uff98\017\uff98\020\uff98" +
    "\021\uff98\022\uff98\027\uff98\052\uff98\063\uff98\066\uff98\074" +
    "\uff98\075\uff98\077\uff98\001\002\000\004\050\271\001\002" +
    "\000\032\016\170\017\163\020\171\021\172\022\164\027" +
    "\151\052\165\063\023\066\040\074\161\075\152\077\166" +
    "\001\002\000\004\050\222\001\002\000\006\047\175\054" +
    "\034\001\002\000\032\016\uff9c\017\uff9c\020\uff9c\021\uff9c" +
    "\022\uff9c\027\uff9c\052\uff9c\063\uff9c\066\uff9c\074\uff9c\075" +
    "\uff9c\077\uff9c\001\002\000\016\062\200\063\201\064\202" +
    "\065\075\066\176\076\007\001\002\000\070\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\027\uffe8\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\046\uffb2\051\uffb2\052\uffe8" +
    "\054\uffe8\063\uffe8\066\uffe8\074\uffe8\075\uffe8\077\uffe8\001" +
    "\002\000\032\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91" +
    "\027\uff91\052\uff91\063\uff91\066\uff91\074\uff91\075\uff91\077" +
    "\uff91\001\002\000\046\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\027\uffe6\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\042\uffb5\052\uffe6\063\uffe6\066\uffe6\074\uffe6\075\uffe6" +
    "\077\uffe6\001\002\000\070\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\027\uffe7\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\046\uffb1\051\uffb1\052\uffe7\054\uffe7\063\uffe7" +
    "\066\uffe7\074\uffe7\075\uffe7\077\uffe7\001\002\000\046\016" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\027\uffe5\030\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\034\uffb3\042\uffb3\052\uffe5\063" +
    "\uffe5\066\uffe5\074\uffe5\075\uffe5\077\uffe5\001\002\000\034" +
    "\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\027\uff92\052" +
    "\uff92\054\034\063\uff92\066\uff92\074\uff92\075\uff92\077\uff92" +
    "\001\002\000\016\030\206\031\207\032\211\033\214\034" +
    "\212\042\210\001\002\000\032\016\uff93\017\uff93\020\uff93" +
    "\021\uff93\022\uff93\027\uff93\052\uff93\063\uff93\066\uff93\074" +
    "\uff93\075\uff93\077\uff93\001\002\000\014\062\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\066\uffb0\001\002\000\014\062\uffaf\063" +
    "\uffaf\064\uffaf\065\uffaf\066\uffaf\001\002\000\014\062\uffab" +
    "\063\uffab\064\uffab\065\uffab\066\uffab\001\002\000\014\062" +
    "\uffae\063\uffae\064\uffae\065\uffae\066\uffae\001\002\000\014" +
    "\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac\001\002\000" +
    "\014\062\074\063\073\064\076\065\075\066\100\001\002" +
    "\000\014\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad\001" +
    "\002\000\046\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f" +
    "\027\uff7f\030\206\031\207\032\211\033\214\034\212\042" +
    "\210\052\uff7f\063\uff7f\066\uff7f\074\uff7f\075\uff7f\077\uff7f" +
    "\001\002\000\014\062\074\063\073\064\076\065\075\066" +
    "\100\001\002\000\046\016\uff7e\017\uff7e\020\uff7e\021\uff7e" +
    "\022\uff7e\027\uff7e\030\206\031\207\032\211\033\214\034" +
    "\212\042\210\052\uff7e\063\uff7e\066\uff7e\074\uff7e\075\uff7e" +
    "\077\uff7e\001\002\000\014\062\074\063\073\064\076\065" +
    "\075\066\100\001\002\000\032\016\uff7d\017\uff7d\020\uff7d" +
    "\021\uff7d\022\uff7d\027\uff7d\052\uff7d\063\uff7d\066\uff7d\074" +
    "\uff7d\075\uff7d\077\uff7d\001\002\000\012\044\230\045\226" +
    "\046\225\050\231\001\002\000\004\051\255\001\002\000" +
    "\014\044\230\045\226\046\225\050\231\051\uff85\001\002" +
    "\000\014\044\uffa1\045\uffa1\046\uffa1\050\uffa1\051\uffa1\001" +
    "\002\000\014\044\uffa3\045\uffa3\046\uffa3\050\uffa3\051\uffa3" +
    "\001\002\000\014\044\uff80\045\uff80\046\uff80\050\uff80\051" +
    "\uff80\001\002\000\014\044\uffa2\045\uffa2\046\uffa2\050\uffa2" +
    "\051\uffa2\001\002\000\014\062\074\063\201\064\076\065" +
    "\075\066\176\001\002\000\020\035\242\036\243\037\237" +
    "\040\235\041\236\043\244\046\241\001\002\000\004\054" +
    "\034\001\002\000\020\035\242\036\243\037\237\040\235" +
    "\041\236\043\244\046\241\001\002\000\014\062\uffa7\063" +
    "\uffa7\064\uffa7\065\uffa7\066\uffa7\001\002\000\014\062\uffa6" +
    "\063\uffa6\064\uffa6\065\uffa6\066\uffa6\001\002\000\014\062" +
    "\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\001\002\000\014" +
    "\062\074\063\201\064\076\065\075\066\176\001\002\000" +
    "\014\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\001\002" +
    "\000\014\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\001" +
    "\002\000\014\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9" +
    "\001\002\000\014\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066" +
    "\uffa5\001\002\000\004\051\250\001\002\000\004\051\247" +
    "\001\002\000\014\044\uff83\045\uff83\046\uff83\050\uff83\051" +
    "\uff83\001\002\000\014\044\uff81\045\uff81\046\uff81\050\uff81" +
    "\051\uff81\001\002\000\014\062\074\063\073\064\076\065" +
    "\075\066\100\001\002\000\004\051\253\001\002\000\014" +
    "\044\uff82\045\uff82\046\uff82\050\uff82\051\uff82\001\002\000" +
    "\004\051\uff84\001\002\000\004\024\256\001\002\000\032" +
    "\016\170\017\163\020\171\021\172\022\164\027\151\052" +
    "\165\063\023\066\040\074\161\075\152\077\166\001\002" +
    "\000\006\025\260\026\261\001\002\000\032\016\170\017" +
    "\163\020\171\021\172\022\164\027\151\052\165\063\023" +
    "\066\040\074\161\075\152\077\166\001\002\000\032\016" +
    "\uff89\017\uff89\020\uff89\021\uff89\022\uff89\027\uff89\052\uff89" +
    "\063\uff89\066\uff89\074\uff89\075\uff89\077\uff89\001\002\000" +
    "\004\026\263\001\002\000\032\016\uff88\017\uff88\020\uff88" +
    "\021\uff88\022\uff88\027\uff88\052\uff88\063\uff88\066\uff88\074" +
    "\uff88\075\uff88\077\uff88\001\002\000\004\023\265\001\002" +
    "\000\004\050\266\001\002\000\012\044\230\045\226\046" +
    "\225\050\231\001\002\000\004\051\270\001\002\000\032" +
    "\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\027\uff8a\052" +
    "\uff8a\063\uff8a\066\uff8a\074\uff8a\075\uff8a\077\uff8a\001\002" +
    "\000\006\063\023\066\040\001\002\000\004\047\273\001" +
    "\002\000\014\062\021\063\023\064\027\066\040\076\007" +
    "\001\002\000\004\057\312\001\002\000\006\057\277\061" +
    "\276\001\002\000\014\062\074\063\073\064\076\065\075" +
    "\066\100\001\002\000\014\062\074\063\073\064\076\065" +
    "\075\066\100\001\002\000\004\051\301\001\002\000\004" +
    "\060\302\001\002\000\032\016\170\017\163\020\171\021" +
    "\172\022\164\027\151\052\165\063\023\066\040\074\161" +
    "\075\152\077\166\001\002\000\004\071\304\001\002\000" +
    "\032\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\027\uff8e" +
    "\052\uff8e\063\uff8e\066\uff8e\074\uff8e\075\uff8e\077\uff8e\001" +
    "\002\000\004\051\306\001\002\000\004\060\307\001\002" +
    "\000\032\016\170\017\163\020\171\021\172\022\164\027" +
    "\151\052\165\063\023\066\040\074\161\075\152\077\166" +
    "\001\002\000\004\071\311\001\002\000\032\016\uff8c\017" +
    "\uff8c\020\uff8c\021\uff8c\022\uff8c\027\uff8c\052\uff8c\063\uff8c" +
    "\066\uff8c\074\uff8c\075\uff8c\077\uff8c\001\002\000\014\062" +
    "\074\063\073\064\076\065\075\066\100\001\002\000\004" +
    "\051\314\001\002\000\004\060\315\001\002\000\032\016" +
    "\170\017\163\020\171\021\172\022\164\027\151\052\165" +
    "\063\023\066\040\074\161\075\152\077\166\001\002\000" +
    "\004\071\317\001\002\000\032\016\uff8d\017\uff8d\020\uff8d" +
    "\021\uff8d\022\uff8d\027\uff8d\052\uff8d\063\uff8d\066\uff8d\074" +
    "\uff8d\075\uff8d\077\uff8d\001\002\000\034\016\uff96\017\uff96" +
    "\020\uff96\021\uff96\022\uff96\027\uff96\052\uff96\053\uff96\063" +
    "\uff96\066\uff96\074\uff96\075\uff96\077\uff96\001\002\000\036" +
    "\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\027\uff97\052" +
    "\uff97\053\uff97\054\034\063\uff97\066\uff97\074\uff97\075\uff97" +
    "\077\uff97\001\002\000\034\016\uff95\017\uff95\020\uff95\021" +
    "\uff95\022\uff95\027\uff95\052\uff95\053\uff95\063\uff95\066\uff95" +
    "\074\uff95\075\uff95\077\uff95\001\002\000\004\050\324\001" +
    "\002\000\016\062\021\063\023\064\027\066\040\067\043" +
    "\076\007\001\002\000\004\051\326\001\002\000\004\053" +
    "\327\001\002\000\032\016\uff94\017\uff94\020\uff94\021\uff94" +
    "\022\uff94\027\uff94\052\uff94\063\uff94\066\uff94\074\uff94\075" +
    "\uff94\077\uff94\001\002\000\004\027\331\001\002\000\004" +
    "\066\332\001\002\000\004\072\333\001\002\000\032\016" +
    "\170\017\163\020\171\021\172\022\164\027\151\052\165" +
    "\063\023\066\040\074\161\075\152\077\166\001\002\000" +
    "\004\027\335\001\002\000\032\016\uff87\017\uff87\020\uff87" +
    "\021\uff87\022\uff87\027\uff87\052\uff87\063\uff87\066\uff87\074" +
    "\uff87\075\uff87\077\uff87\001\002\000\012\044\230\045\226" +
    "\046\225\050\231\001\002\000\004\051\340\001\002\000" +
    "\004\060\341\001\002\000\032\016\170\017\163\020\171" +
    "\021\172\022\164\027\151\052\165\063\023\066\040\074" +
    "\161\075\152\077\166\001\002\000\004\073\343\001\002" +
    "\000\032\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\027" +
    "\uff8b\052\uff8b\063\uff8b\066\uff8b\074\uff8b\075\uff8b\077\uff8b" +
    "\001\002\000\044\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\051\ufffd\053\ufffd\056\ufffd" +
    "\062\ufffd\063\ufffd\064\ufffd\066\ufffd\076\ufffd\100\ufffd\001" +
    "\002\000\004\066\346\001\002\000\004\070\347\001\002" +
    "\000\032\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\027" +
    "\uff8f\052\uff8f\063\uff8f\066\uff8f\074\uff8f\075\uff8f\077\uff8f" +
    "\001\002\000\032\016\170\017\163\020\171\021\172\022" +
    "\164\027\151\052\165\063\023\066\040\074\161\075\152" +
    "\077\166\001\002\000\032\016\uff86\017\uff86\020\uff86\021" +
    "\uff86\022\uff86\027\uff86\052\uff86\063\uff86\066\uff86\074\uff86" +
    "\075\uff86\077\uff86\001\002\000\046\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\025\uff9f\026\uff9f\027\uff9f" +
    "\052\uff9f\053\uff9f\063\uff9f\066\uff9f\071\uff9f\073\uff9f\074" +
    "\uff9f\075\uff9f\077\uff9f\001\002\000\004\053\354\001\002" +
    "\000\044\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\051\ufffc\053\ufffc\056\ufffc\062\ufffc" +
    "\063\ufffc\064\ufffc\066\ufffc\076\ufffc\100\ufffc\001\002\000" +
    "\004\051\uffe2\001\002\000\016\006\020\007\015\010\016" +
    "\011\005\012\004\052\357\001\002\000\032\016\170\017" +
    "\163\020\171\021\172\022\164\027\151\052\165\063\023" +
    "\066\040\074\161\075\152\077\166\001\002\000\004\052" +
    "\361\001\002\000\032\016\170\017\163\020\171\021\172" +
    "\022\164\027\151\052\165\063\023\066\040\074\161\075" +
    "\152\077\166\001\002\000\004\053\363\001\002\000\044" +
    "\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011" +
    "\ufffe\012\ufffe\051\ufffe\053\ufffe\056\ufffe\062\ufffe\063\ufffe" +
    "\064\ufffe\066\ufffe\076\ufffe\100\ufffe\001\002\000\004\053" +
    "\365\001\002\000\044\002\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\051\ufffb\053\ufffb\056" +
    "\ufffb\062\ufffb\063\ufffb\064\ufffb\066\ufffb\076\ufffb\100\ufffb" +
    "\001\002\000\006\063\023\066\040\001\002\000\014\013" +
    "\uffdf\014\uffdf\015\uffdf\051\uffdf\056\374\001\002\000\016" +
    "\013\uffe0\014\uffe0\015\uffe0\051\uffe0\054\101\056\373\001" +
    "\002\000\014\013\uffdd\014\uffdd\015\uffdd\051\uffdd\056\372" +
    "\001\002\000\012\013\uffdc\014\uffdc\015\uffdc\051\uffdc\001" +
    "\002\000\012\013\uffe1\014\uffe1\015\uffe1\051\uffe1\001\002" +
    "\000\012\013\uffde\014\uffde\015\uffde\051\uffde\001\002\000" +
    "\004\050\376\001\002\000\012\013\131\014\132\015\135" +
    "\051\u0100\001\002\000\004\051\u010c\001\002\000\016\006" +
    "\020\007\015\010\016\011\005\012\004\052\u0102\001\002" +
    "\000\004\052\u0107\001\002\000\032\016\170\017\163\020" +
    "\171\021\172\022\164\027\151\052\165\063\023\066\040" +
    "\074\161\075\152\077\166\001\002\000\006\053\u0105\077" +
    "\166\001\002\000\004\053\u0106\001\002\000\044\002\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\051\ufff7\053\ufff7\056\ufff7\062\ufff7\063\ufff7\064\ufff7" +
    "\066\ufff7\076\ufff7\100\ufff7\001\002\000\044\002\ufff3\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\051\ufff3\053\ufff3\056\ufff3\062\ufff3\063\ufff3\064\ufff3\066" +
    "\ufff3\076\ufff3\100\ufff3\001\002\000\032\016\170\017\163" +
    "\020\171\021\172\022\164\027\151\052\165\063\023\066" +
    "\040\074\161\075\152\077\166\001\002\000\006\053\u010a" +
    "\077\166\001\002\000\004\053\u010b\001\002\000\044\002" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\051\ufff8\053\ufff8\056\ufff8\062\ufff8\063\ufff8\064" +
    "\ufff8\066\ufff8\076\ufff8\100\ufff8\001\002\000\044\002\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\051\ufff4\053\ufff4\056\ufff4\062\ufff4\063\ufff4\064\ufff4" +
    "\066\ufff4\076\ufff4\100\ufff4\001\002\000\016\006\020\007" +
    "\015\010\016\011\005\012\004\052\u010e\001\002\000\004" +
    "\052\u0113\001\002\000\032\016\170\017\163\020\171\021" +
    "\172\022\164\027\151\052\165\063\023\066\040\074\161" +
    "\075\152\077\166\001\002\000\006\053\u0111\077\166\001" +
    "\002\000\004\053\u0112\001\002\000\044\002\ufff9\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\051" +
    "\ufff9\053\ufff9\056\ufff9\062\ufff9\063\ufff9\064\ufff9\066\ufff9" +
    "\076\ufff9\100\ufff9\001\002\000\044\002\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\051\ufff5" +
    "\053\ufff5\056\ufff5\062\ufff5\063\ufff5\064\ufff5\066\ufff5\076" +
    "\ufff5\100\ufff5\001\002\000\032\016\170\017\163\020\171" +
    "\021\172\022\164\027\151\052\165\063\023\066\040\074" +
    "\161\075\152\077\166\001\002\000\006\053\u0116\077\166" +
    "\001\002\000\004\053\u0117\001\002\000\044\002\ufffa\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\051\ufffa\053\ufffa\056\ufffa\062\ufffa\063\ufffa\064\ufffa\066" +
    "\ufffa\076\ufffa\100\ufffa\001\002\000\044\002\ufff6\004\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\051" +
    "\ufff6\053\ufff6\056\ufff6\062\ufff6\063\ufff6\064\ufff6\066\ufff6" +
    "\076\ufff6\100\ufff6\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0116\000\020\002\011\003\031\010\025\011\021\017" +
    "\016\022\030\040\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\064\016\067\022\066\035\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\002\032\003\031\010\025\011\021\017\016\022\030" +
    "\040\023\001\001\000\002\001\001\000\006\017\035\022" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\011" +
    "\044\014\045\015\043\017\047\022\046\001\001\000\004" +
    "\022\055\001\001\000\014\011\044\014\054\015\043\017" +
    "\047\022\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\102\022\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\111\022" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\117\022\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\133\007\127\026\132\001\001\000\004\010" +
    "\365\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\133\007\127\026\354\001\001\000" +
    "\002\001\001\000\010\005\137\010\140\013\141\001\001" +
    "\000\030\006\147\011\161\020\173\022\172\023\153\024" +
    "\157\030\352\032\156\034\154\037\155\041\166\001\001" +
    "\000\002\001\001\000\014\011\064\016\067\022\066\035" +
    "\143\036\144\001\001\000\010\005\142\010\140\013\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\064\016\067\022\066\035\145\001\001\000\002\001\001" +
    "\000\030\006\147\011\161\020\173\022\172\023\153\024" +
    "\157\030\152\032\156\034\154\037\155\041\166\001\001" +
    "\000\030\006\147\011\161\020\173\022\172\023\153\024" +
    "\157\030\351\032\156\034\154\037\155\041\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\317\017\321\022\320\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\147\011\161\020\173" +
    "\022\172\023\153\024\157\030\263\032\156\034\154\037" +
    "\155\041\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\176\017\204\022\202\025" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\214\001\001\000\002" +
    "\001\001\000\004\031\215\001\001\000\004\025\216\001" +
    "\001\000\004\031\217\001\001\000\004\025\220\001\001" +
    "\000\002\001\001\000\010\021\226\027\222\033\223\001" +
    "\001\000\002\001\001\000\010\021\226\027\253\033\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\231\022\232\025\233" +
    "\001\001\000\004\012\250\001\001\000\002\001\001\000" +
    "\004\012\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\244\022\232\025\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\006\147\011\161\020\173\022\172" +
    "\023\153\024\157\030\256\032\156\034\154\037\155\041" +
    "\166\001\001\000\002\001\001\000\030\006\147\011\161" +
    "\020\173\022\172\023\153\024\157\030\261\032\156\034" +
    "\154\037\155\041\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\226\033\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\271\001\001\000\002\001" +
    "\001\000\006\017\274\022\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\304\001\001\000\004\025" +
    "\277\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\006\147\011\161\020\173\022\172\023\153\024\157\030" +
    "\302\032\156\034\154\037\155\041\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\006\147\011\161\020\173\022\172\023\153" +
    "\024\157\030\307\032\156\034\154\037\155\041\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\006" +
    "\147\011\161\020\173\022\172\023\153\024\157\030\315" +
    "\032\156\034\154\037\155\041\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\011\044\014" +
    "\324\015\043\017\047\022\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\147\011\161" +
    "\020\173\022\172\023\153\024\157\030\333\032\156\034" +
    "\154\037\155\041\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\226\033\336\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\147\011\161\020\173" +
    "\022\172\023\153\024\157\030\341\032\156\034\154\037" +
    "\155\041\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\006\147\011\161\020\173\022\172" +
    "\023\153\024\157\030\350\032\156\034\154\037\155\041" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\357\010\140\013\141\001\001\000\030\006\147\011\161" +
    "\020\173\022\172\023\153\024\157\030\363\032\156\034" +
    "\154\037\155\041\166\001\001\000\002\001\001\000\030" +
    "\006\147\011\161\020\173\022\172\023\153\024\157\030" +
    "\361\032\156\034\154\037\155\041\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\366\016\370\022\367\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\133\007\127\026\376\001\001\000\002\001" +
    "\001\000\010\005\u0100\010\140\013\141\001\001\000\002" +
    "\001\001\000\030\006\147\011\161\020\173\022\172\023" +
    "\153\024\157\030\u0102\032\156\034\154\037\155\041\166" +
    "\001\001\000\004\037\u0103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\147\011\161" +
    "\020\173\022\172\023\153\024\157\030\u0107\032\156\034" +
    "\154\037\155\041\166\001\001\000\004\037\u0108\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\u010c\010\140\013\141\001\001\000\002\001\001" +
    "\000\030\006\147\011\161\020\173\022\172\023\153\024" +
    "\157\030\u010e\032\156\034\154\037\155\041\166\001\001" +
    "\000\004\037\u010f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\147\011\161\020\173" +
    "\022\172\023\153\024\157\030\u0113\032\156\034\154\037" +
    "\155\041\166\001\001\000\004\037\u0114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntacticAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntacticAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticAnalyzer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String result="";
    String temporal = "" ; 
    String temporal2="";
    String temporal3="";
    String temporalvalor="";
    String envget="false";
    String enviaset="false";
    String hereda="";
    String guardo="";
    String consulta="";
    String valorsigno="";
    String valoracceder="";
    String valoraccederid="";
    String serialcondicion="";
    String insertarvalores="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        result +="\n!!!!!!! Error Sintactico Recuperado !!!!!!!\t\tLexema: "+lexema+"\t\tFila: "+fila+"\t\tColumna: "+columna;
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        result +="\n!!!!!!! Error Sintactico, Panic Mode !!!!!!!\t\tLexema: "+lexema+"\t\tFila: "+fila+"\t\tColumna: "+columna;
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SyntacticAnalyzer$actions {



  private final SyntacticAnalyzer parser;

  /** Constructor */
  CUP$SyntacticAnalyzer$actions(SyntacticAnalyzer parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntacticAnalyzer$do_action_part00000000(
    int                        CUP$SyntacticAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticAnalyzer$parser,
    java.util.Stack            CUP$SyntacticAnalyzer$stack,
    int                        CUP$SyntacticAnalyzer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntacticAnalyzer$parser.done_parsing();
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INICIO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= INICIO S 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= procedure id parentesis_abierto ARGUMENTO parentesis_cerrado DEFVARS llave_abierta INSTRUCCIONES1 llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= procedure id parentesis_abierto parentesis_cerrado DEFVARS llave_abierta INSTRUCCIONES1 llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= procedure id parentesis_abierto parentesis_cerrado llave_abierta INSTRUCCIONES1 llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= procedure id parentesis_abierto ARGUMENTO parentesis_cerrado llave_abierta INSTRUCCIONES1 llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= function id parentesis_abierto ARGUMENTO parentesis_cerrado DEFVARS llave_abierta INSTRUCCIONES1 llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= function id parentesis_abierto ARGUMENTO parentesis_cerrado llave_abierta INSTRUCCIONES1 llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= function id parentesis_abierto parentesis_cerrado DEFVARS llave_abierta INSTRUCCIONES1 llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= function id parentesis_abierto parentesis_cerrado llave_abierta INSTRUCCIONES1 llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= function id parentesis_abierto ARGUMENTO parentesis_cerrado DEFVARS llave_abierta INSTRUCCIONES1 RETORNOS llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-9)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= function id parentesis_abierto ARGUMENTO parentesis_cerrado llave_abierta INSTRUCCIONES1 RETORNOS llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO ::= function id parentesis_abierto parentesis_cerrado DEFVARS llave_abierta INSTRUCCIONES1 RETORNOS llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INICIO ::= function id parentesis_abierto parentesis_cerrado llave_abierta INSTRUCCIONES1 RETORNOS llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO ::= MAIN 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MAIN ::= principal llave_abierta 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MAIN",30, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MAIN ::= id parentesis_abierto 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MAIN",30, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MAIN ::= VECTOR 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MAIN",30, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MAIN ::= EXP_NUMERICA 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MAIN",30, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MAIN ::= coma 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MAIN",30, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MAIN ::= parentesis_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MAIN",30, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MAIN ::= EXP_INICIO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MAIN",30, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MAIN ::= TIPODATO VAR 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MAIN",30, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MAIN ::= llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MAIN",30, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP_INICIO ::= id 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("EXP_INICIO",16, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXP_INICIO ::= letra 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("EXP_INICIO",16, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXP_NUMERICA ::= digito 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("EXP_NUMERICA",13, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP_NUMERICA ::= entero 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("EXP_NUMERICA",13, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP_NUMERICA ::= decimal 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("EXP_NUMERICA",13, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ARGUMENTO ::= ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",20, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARGUMENTO ::= ARGUMENTOS ARGUMENTO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",20, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARGUMENTOS ::= REFERENCIA TIPODATO EXP_INICIO coma 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",2, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARGUMENTOS ::= REFERENCIA TIPODATO EXP_INICIO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",2, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARGUMENTOS ::= REFERENCIA TIPODATO VECTOR 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",2, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARGUMENTOS ::= REFERENCIA TIPODATO VECTOR coma 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",2, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARGUMENTOS ::= REFERENCIA TIPODATO MATRIZ 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",2, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ARGUMENTOS ::= REFERENCIA TIPODATO MATRIZ coma 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",2, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // REFERENCIA ::= parametro_entrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("REFERENCIA",5, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // REFERENCIA ::= parametro_salida 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("REFERENCIA",5, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // REFERENCIA ::= parametro_entada_salida 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("REFERENCIA",5, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELEMENTO ::= ELEMENTOS 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTO",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELEMENTO ::= ELEMENTOS ELEMENTO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTO",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELEMENTOS ::= EXP_NUMERICA coma 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELEMENTOS ::= EXP_NUMERICA 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELEMENTOS ::= comilla_abierta EXP_INICIO comilla_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELEMENTOS ::= comilla_abierta EXP_INICIO comilla_cerrada coma 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELEMENTOS ::= EXP_INICIO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELEMENTOS ::= VECTOR 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELEMENTOS ::= VECTOR coma 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELEMENTOS ::= EXP_INICIO coma 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPODATO ::= int_type 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("TIPODATO",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPODATO ::= char_type 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("TIPODATO",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPODATO ::= float_type 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("TIPODATO",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPODATO ::= boolean_type 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("TIPODATO",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPODATO ::= string_type 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("TIPODATO",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VECTOR ::= EXP_INICIO corchete_abierto corchete_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VECTOR",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VECTOR ::= EXP_INICIO corchete_abierto EXP_NUMERICA corchete_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VECTOR",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VECTOR ::= EXP_INICIO corchete_abierto EXP_INICIO corchete_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VECTOR",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VECTOR ::= EXP_INICIO corchete_abierto corchete_cerrado asignacion llave_abierta ELEMENTO llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VECTOR",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MATRIZ ::= EXP_INICIO corchete_abierto corchete_cerrado corchete_abierto corchete_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MATRIZ",12, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MATRIZ ::= EXP_INICIO corchete_abierto EXP_INICIO corchete_cerrado corchete_abierto EXP_INICIO corchete_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MATRIZ",12, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MATRIZ ::= EXP_INICIO corchete_abierto EXP_NUMERICA corchete_cerrado corchete_abierto EXP_NUMERICA corchete_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MATRIZ",12, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MATRIZ ::= EXP_INICIO corchete_abierto EXP_NUMERICA corchete_cerrado corchete_abierto EXP_INICIO corchete_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MATRIZ",12, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MATRIZ ::= EXP_INICIO corchete_abierto EXP_INICIO corchete_cerrado corchete_abierto EXP_NUMERICA corchete_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MATRIZ",12, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DEFVARS ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DEFVARS",3, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DEFVARS ::= DEFVAR DEFVARS 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DEFVARS",3, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DEFVAR ::= TIPODATO VARS 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DEFVAR",9, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VARS ::= VARS VAR 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VARS",28, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VARS ::= VAR 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VARS",28, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VAR ::= id 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VAR",27, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VAR ::= letra 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VAR",27, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VAR ::= id asignacion EXPRESION_REG 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VAR",27, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VAR ::= letra asignacion EXPRESION_REG 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VAR",27, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VAR ::= MATRIZ 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VAR",27, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VAR ::= VECTOR 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VAR",27, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION_REG ::= digito 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("EXPRESION_REG",19, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION_REG ::= numero 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("EXPRESION_REG",19, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION_REG ::= entero 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("EXPRESION_REG",19, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION_REG ::= id 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("EXPRESION_REG",19, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION_REG ::= letra 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("EXPRESION_REG",19, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERADOR_MATEMATICO ::= suma 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_MATEMATICO",23, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERADOR_MATEMATICO ::= resta 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_MATEMATICO",23, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERADOR_MATEMATICO ::= multiplicacion 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_MATEMATICO",23, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERADOR_MATEMATICO ::= division 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_MATEMATICO",23, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERADOR_MATEMATICO ::= potencia 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_MATEMATICO",23, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERADOR_MATEMATICO ::= modulo 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_MATEMATICO",23, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERADOR_LOGICO ::= menor 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERADOR_LOGICO ::= mayor 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERADOR_LOGICO ::= comparacion 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERADOR_LOGICO ::= menor_igual 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERADOR_LOGICO ::= mayor_igual 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERADOR_LOGICO ::= diferente 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERADOR_LOGICO ::= not 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERADOR_RELACIONAL ::= and 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERADOR_RELACIONAL ::= or 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPERADOR_RELACIONAL ::= not 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INSTRUCCIONES1 ::= lambda 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES1",22, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INSTRUCCIONES1 ::= CUERPITO INSTRUCCIONES1 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES1",22, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CUERPITO ::= CICLO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CUERPITO",4, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CUERPITO ::= CONDICIONAL 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CUERPITO",4, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CUERPITO ::= OPEMATES 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CUERPITO",4, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CUERPITO ::= IMPRIMIR 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CUERPITO",4, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CUERPITO ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CUERPITO",4, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CUERPITO ::= RETORNOS 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CUERPITO",4, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CUERPITO ::= LLAMADO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CUERPITO",4, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // RETORNOS ::= retorno EXP_INICIO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("RETORNOS",29, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // RETORNOS ::= retorno VECTOR 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("RETORNOS",29, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // RETORNOS ::= retorno EXP_NUMERICA 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("RETORNOS",29, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LLAMADO ::= llave_abierta id parentesis_abierto ELEMENTO parentesis_cerrado llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("LLAMADO",31, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VARIABLES ::= EXP_INICIO asignacion EXP_NUMERICA 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VARIABLES",18, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VARIABLES ::= EXP_INICIO asignacion EXP_INICIO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VARIABLES",18, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VARIABLES ::= EXP_INICIO asignacion VECTOR 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VARIABLES",18, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VARIABLES ::= VECTOR 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VARIABLES",18, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IMPRIMIR ::= imprimir comilla_abierta id comilla_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CICLO ::= ciclo_for parentesis_abierto EXP_INICIO asignacion EXP_NUMERICA hasta EXPRESION_REG parentesis_cerrado hacer INSTRUCCIONES1 end_for 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CICLO",24, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-10)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CICLO ::= ciclo_for parentesis_abierto EXP_INICIO asignacion EXP_INICIO hasta EXPRESION_REG parentesis_cerrado hacer INSTRUCCIONES1 end_for 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CICLO",24, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-10)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CICLO ::= ciclo_for parentesis_abierto EXP_INICIO asignacion EXP_NUMERICA down_to EXPRESION_REG parentesis_cerrado hacer INSTRUCCIONES1 end_for 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CICLO",24, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-10)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CICLO ::= ciclo_while parentesis_abierto CONDICION parentesis_cerrado hacer INSTRUCCIONES1 end_while 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CICLO",24, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CICLO ::= ciclo_repeat INSTRUCCIONES1 condicional_until parentesis_abierto CONDICION parentesis_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CICLO",24, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONDICIONAL ::= condicional_if parentesis_abierto CONDICION11 parentesis_cerrado then INSTRUCCIONES1 end_if 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",26, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONDICIONAL ::= condicional_if parentesis_abierto CONDICION11 parentesis_cerrado then INSTRUCCIONES1 sino INSTRUCCIONES1 end_if 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",26, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONDICIONAL ::= condicional_switch id caso id dos_puntos INSTRUCCIONES1 caso 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",26, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONDICIONAL ::= caso id INSTRUCCIONES1 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",26, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONDICION11 ::= CONDICION 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CONDICION11",21, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONDICION11 ::= CONDICION CONDICION11 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CONDICION11",21, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONDICION ::= parentesis_abierto EXPRESION_REG OPERADOR_LOGICO EXPRESION_REG parentesis_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CONDICION",25, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONDICION ::= parentesis_abierto VECTOR OPERADOR_LOGICO EXPRESION_REG parentesis_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CONDICION",25, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONDICION ::= parentesis_abierto EXPRESION_REG OPERADOR_LOGICO VECTOR parentesis_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CONDICION",25, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONDICION ::= OPERADOR_RELACIONAL 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CONDICION",25, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPEMATES ::= EXP_INICIO asignacion EXPRESION_REG OPERADOR_MATEMATICO EXPRESION_REG 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPEMATES",14, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPEMATES ::= EXP_INICIO asignacion EXPRESION_REG OPERADOR_MATEMATICO EXPRESION_REG OPERADOR_MATEMATICO EXPRESION_REG 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPEMATES",14, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPEMATES ::= EXP_INICIO asignacion EXPRESION_REG OPERADOR_MATEMATICO EXPRESION_REG OPERADOR_MATEMATICO EXPRESION_REG OPERADOR_MATEMATICO EXPRESION_REG 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPEMATES",14, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntacticAnalyzer$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticAnalyzer$do_action(
    int                        CUP$SyntacticAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticAnalyzer$parser,
    java.util.Stack            CUP$SyntacticAnalyzer$stack,
    int                        CUP$SyntacticAnalyzer$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticAnalyzer$do_action_part00000000(
                               CUP$SyntacticAnalyzer$act_num,
                               CUP$SyntacticAnalyzer$parser,
                               CUP$SyntacticAnalyzer$stack,
                               CUP$SyntacticAnalyzer$top);
    }
}

}
