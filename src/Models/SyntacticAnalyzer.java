
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Models;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SyntacticAnalyzer extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public SyntacticAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SyntacticAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\013\000\002\003\012\000\002\003\011" +
    "\000\002\003\012\000\002\003\013\000\002\003\012\000" +
    "\002\003\012\000\002\003\011\000\002\022\003\000\002" +
    "\022\004\000\002\004\006\000\002\004\005\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\014\003" +
    "\000\002\014\004\000\002\015\004\000\002\015\003\000" +
    "\002\015\005\000\002\015\006\000\002\015\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\011\005\000\002\011\006" +
    "\000\002\011\006\000\002\011\011\000\002\011\010\000" +
    "\002\011\010\000\002\016\007\000\002\016\011\000\002" +
    "\016\011\000\002\016\011\000\002\016\011\000\002\005" +
    "\003\000\002\005\004\000\002\013\004\000\002\036\004" +
    "\000\002\036\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\030\003\000\002\030\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\006\000\002\032\013\000\002\032\013\000\002\032" +
    "\013\000\002\032\011\000\002\032\010\000\002\034\011" +
    "\000\002\034\013\000\002\034\011\000\002\034\005\000" +
    "\002\026\003\000\002\026\004\000\002\033\007\000\002" +
    "\033\003\000\002\017\005\000\002\027\005\000\002\027" +
    "\003\000\002\023\005\000\002\023\005\000\002\023\003" +
    "\000\002\024\005\000\002\024\005\000\002\024\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\006\004\004\005\006\001\002\000\004\066" +
    "\311\001\002\000\004\002\310\001\002\000\004\066\011" +
    "\001\002\000\010\002\000\004\004\005\006\001\002\000" +
    "\004\002\uffff\001\002\000\004\050\012\001\002\000\012" +
    "\013\014\014\015\015\020\051\021\001\002\000\014\006" +
    "\026\007\031\010\023\011\022\012\027\001\002\000\014" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\001\002\000" +
    "\014\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\001\002" +
    "\000\004\051\275\001\002\000\012\013\014\014\015\015" +
    "\020\051\ufff6\001\002\000\014\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\001\002\000\016\006\026\007\031\010" +
    "\023\011\022\012\027\052\024\001\002\000\006\063\uffe7" +
    "\066\uffe7\001\002\000\006\063\uffe6\066\uffe6\001\002\000" +
    "\032\016\136\017\132\020\137\021\140\022\134\027\116" +
    "\062\131\064\135\065\120\066\133\074\126\075\121\001" +
    "\002\000\004\052\114\001\002\000\006\063\uffe5\066\uffe5" +
    "\001\002\000\006\063\uffe4\066\uffe4\001\002\000\006\063" +
    "\034\066\041\001\002\000\006\063\uffe8\066\uffe8\001\002" +
    "\000\016\006\026\007\031\010\023\011\022\012\027\052" +
    "\uffd8\001\002\000\004\052\uffd7\001\002\000\022\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\052\uffd2\063\uffd2\066" +
    "\uffd2\001\002\000\022\006\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\052\uffd0\063\uffd0\066\uffd0\001\002\000\022\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\052\uffd4\063\uffd4" +
    "\066\uffd4\001\002\000\022\006\uffd6\007\uffd6\010\uffd6\011" +
    "\uffd6\012\uffd6\052\uffd6\063\034\066\041\001\002\000\022" +
    "\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\052\uffd1\063" +
    "\uffd1\066\uffd1\001\002\000\024\006\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\052\uffd3\054\042\063\uffd3\066\uffd3\001" +
    "\002\000\010\055\045\064\043\066\044\001\002\000\004" +
    "\055\103\001\002\000\004\055\066\001\002\000\026\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\047\047\052\uffe3" +
    "\054\046\063\uffe3\066\uffe3\001\002\000\004\055\065\001" +
    "\002\000\004\052\050\001\002\000\010\064\051\066\055" +
    "\067\054\001\002\000\014\053\uffec\056\064\064\uffec\066" +
    "\uffec\067\uffec\001\002\000\012\053\uffef\064\051\066\055" +
    "\067\054\001\002\000\004\053\062\001\002\000\004\066" +
    "\057\001\002\000\004\056\056\001\002\000\012\053\uffe9" +
    "\064\uffe9\066\uffe9\067\uffe9\001\002\000\004\070\060\001" +
    "\002\000\014\053\uffeb\056\061\064\uffeb\066\uffeb\067\uffeb" +
    "\001\002\000\012\053\uffea\064\uffea\066\uffea\067\uffea\001" +
    "\002\000\022\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\052\uffe0\063\uffe0\066\uffe0\001\002\000\004\053\uffee\001" +
    "\002\000\012\053\uffed\064\uffed\066\uffed\067\uffed\001\002" +
    "\000\022\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\052" +
    "\uffdd\063\uffdd\066\uffdd\001\002\000\026\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\047\070\052\uffe1\054\067\063" +
    "\uffe1\066\uffe1\001\002\000\006\064\077\066\100\001\002" +
    "\000\014\062\071\063\072\064\074\065\073\066\076\001" +
    "\002\000\072\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\027\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\043\uffcf\046\uffcf" +
    "\051\uffcf\052\uffcf\060\uffcf\062\uffcf\063\uffcf\064\uffcf\065" +
    "\uffcf\066\uffcf\074\uffcf\075\uffcf\001\002\000\072\006\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\012\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\027\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\043\uffcb\046\uffcb\051\uffcb\052\uffcb\060" +
    "\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\074\uffcb" +
    "\075\uffcb\001\002\000\072\006\uffce\007\uffce\010\uffce\011" +
    "\uffce\012\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce" +
    "\027\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\043" +
    "\uffce\046\uffce\051\uffce\052\uffce\060\uffce\062\uffce\063\uffce" +
    "\064\uffce\065\uffce\066\uffce\074\uffce\075\uffce\001\002\000" +
    "\072\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\027\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\043\uffcd\046\uffcd\051\uffcd" +
    "\052\uffcd\060\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066" +
    "\uffcd\074\uffcd\075\uffcd\001\002\000\022\006\uffde\007\uffde" +
    "\010\uffde\011\uffde\012\uffde\052\uffde\063\uffde\066\uffde\001" +
    "\002\000\072\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\027\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\043\uffcc\046\uffcc" +
    "\051\uffcc\052\uffcc\060\uffcc\062\uffcc\063\uffcc\064\uffcc\065" +
    "\uffcc\066\uffcc\074\uffcc\075\uffcc\001\002\000\004\055\102" +
    "\001\002\000\004\055\101\001\002\000\022\006\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\052\uffdb\063\uffdb\066\uffdb" +
    "\001\002\000\022\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\052\uffd9\063\uffd9\066\uffd9\001\002\000\026\006\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\047\105\052\uffe2\054" +
    "\104\063\uffe2\066\uffe2\001\002\000\006\064\107\066\110" +
    "\001\002\000\014\062\071\063\072\064\074\065\073\066" +
    "\076\001\002\000\022\006\uffdf\007\uffdf\010\uffdf\011\uffdf" +
    "\012\uffdf\052\uffdf\063\uffdf\066\uffdf\001\002\000\004\055" +
    "\112\001\002\000\004\055\111\001\002\000\022\006\uffda" +
    "\007\uffda\010\uffda\011\uffda\012\uffda\052\uffda\063\uffda\066" +
    "\uffda\001\002\000\022\006\uffdc\007\uffdc\010\uffdc\011\uffdc" +
    "\012\uffdc\052\uffdc\063\uffdc\066\uffdc\001\002\000\022\006" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\052\uffd5\063\uffd5" +
    "\066\uffd5\001\002\000\032\016\136\017\132\020\137\021" +
    "\140\022\134\027\116\062\131\064\135\065\120\066\133" +
    "\074\126\075\121\001\002\000\032\016\136\017\132\020" +
    "\137\021\140\022\134\027\116\062\131\064\135\065\120" +
    "\066\133\074\126\075\121\001\002\000\004\066\267\001" +
    "\002\000\042\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1" +
    "\027\uffa1\030\uffa1\031\uffa1\032\256\033\257\062\uffa1\064" +
    "\uffa1\065\uffa1\066\uffa1\074\uffa1\075\uffa1\001\002\000\042" +
    "\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\062\uff9c\064\uff9c\065\uff9c" +
    "\066\uff9c\074\uff9c\075\uff9c\001\002\000\004\067\264\001" +
    "\002\000\032\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\027\uffb7\062\uffb7\064\uffb7\065\uffb7\066\uffb7\074\uffb7\075" +
    "\uffb7\001\002\000\004\053\263\001\002\000\032\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\022\uffb8\027\uffb8\062\uffb8\064" +
    "\uffb8\065\uffb8\066\uffb8\074\uffb8\075\uffb8\001\002\000\042" +
    "\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\027\uff9e\030" +
    "\uff9e\031\uff9e\032\uff9e\033\uff9e\062\uff9e\064\uff9e\065\uff9e" +
    "\066\uff9e\074\uff9e\075\uff9e\001\002\000\046\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\023\uffba\025\uffba\026\uffba" +
    "\027\uffba\053\uffba\062\uffba\064\uffba\065\uffba\066\uffba\071" +
    "\uffba\073\uffba\074\uffba\075\uffba\001\002\000\036\016\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\022\uffa4\027\uffa4\030\253\031" +
    "\254\062\uffa4\064\uffa4\065\uffa4\066\uffa4\074\uffa4\075\uffa4" +
    "\001\002\000\032\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022" +
    "\uffb6\027\uffb6\062\uffb6\064\uffb6\065\uffb6\066\uffb6\074\uffb6" +
    "\075\uffb6\001\002\000\042\016\uff9d\017\uff9d\020\uff9d\021" +
    "\uff9d\022\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d" +
    "\062\uff9d\064\uff9d\065\uff9d\066\uff9d\074\uff9d\075\uff9d\001" +
    "\002\000\004\050\245\001\002\000\020\030\233\031\234" +
    "\032\236\033\241\034\240\042\235\047\242\001\002\000" +
    "\004\066\225\001\002\000\042\016\uff9b\017\uff9b\020\uff9b" +
    "\021\uff9b\022\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033" +
    "\uff9b\062\uff9b\064\uff9b\065\uff9b\066\uff9b\074\uff9b\075\uff9b" +
    "\001\002\000\004\066\202\001\002\000\032\016\136\017" +
    "\132\020\137\021\140\022\134\027\116\062\131\064\135" +
    "\065\120\066\133\074\126\075\121\001\002\000\004\050" +
    "\142\001\002\000\032\016\uffb5\017\uffb5\020\uffb5\021\uffb5" +
    "\022\uffb5\027\uffb5\062\uffb5\064\uffb5\065\uffb5\066\uffb5\074" +
    "\uffb5\075\uffb5\001\002\000\012\044\150\045\147\046\146" +
    "\050\151\001\002\000\004\051\166\001\002\000\014\044" +
    "\150\045\147\046\146\050\151\051\uffaa\001\002\000\014" +
    "\044\uffa7\045\uffa7\046\uffa7\050\uffa7\051\uffa7\001\002\000" +
    "\014\044\uffbb\045\uffbb\046\uffbb\050\uffbb\051\uffbb\001\002" +
    "\000\014\044\uffbd\045\uffbd\046\uffbd\050\uffbd\051\uffbd\001" +
    "\002\000\014\044\uffbc\045\uffbc\046\uffbc\050\uffbc\051\uffbc" +
    "\001\002\000\014\062\071\063\072\064\074\065\073\066" +
    "\076\001\002\000\020\035\160\036\161\037\155\040\153" +
    "\041\154\043\162\046\157\001\002\000\014\062\uffc1\063" +
    "\uffc1\064\uffc1\065\uffc1\066\uffc1\001\002\000\014\062\uffc0" +
    "\063\uffc0\064\uffc0\065\uffc0\066\uffc0\001\002\000\014\062" +
    "\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\001\002\000\014" +
    "\062\071\063\072\064\074\065\073\066\076\001\002\000" +
    "\014\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\001\002" +
    "\000\014\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\001" +
    "\002\000\014\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3" +
    "\001\002\000\014\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066" +
    "\uffbf\001\002\000\004\051\164\001\002\000\014\044\uffa8" +
    "\045\uffa8\046\uffa8\050\uffa8\051\uffa8\001\002\000\004\051" +
    "\uffa9\001\002\000\004\024\167\001\002\000\032\016\136" +
    "\017\132\020\137\021\140\022\134\027\116\062\131\064" +
    "\135\065\120\066\133\074\126\075\121\001\002\000\006" +
    "\025\171\026\172\001\002\000\032\016\136\017\132\020" +
    "\137\021\140\022\134\027\116\062\131\064\135\065\120" +
    "\066\133\074\126\075\121\001\002\000\032\016\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\027\uffae\062\uffae\064\uffae" +
    "\065\uffae\066\uffae\074\uffae\075\uffae\001\002\000\004\026" +
    "\174\001\002\000\032\016\uffad\017\uffad\020\uffad\021\uffad" +
    "\022\uffad\027\uffad\062\uffad\064\uffad\065\uffad\066\uffad\074" +
    "\uffad\075\uffad\001\002\000\004\023\176\001\002\000\004" +
    "\050\177\001\002\000\012\044\150\045\147\046\146\050" +
    "\151\001\002\000\004\051\201\001\002\000\032\016\uffaf" +
    "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\027\uffaf\062\uffaf\064" +
    "\uffaf\065\uffaf\066\uffaf\074\uffaf\075\uffaf\001\002\000\004" +
    "\047\203\001\002\000\006\064\204\066\205\001\002\000" +
    "\006\057\214\061\213\001\002\000\004\057\206\001\002" +
    "\000\014\062\071\063\072\064\074\065\073\066\076\001" +
    "\002\000\004\060\210\001\002\000\032\016\136\017\132" +
    "\020\137\021\140\022\134\027\116\062\131\064\135\065" +
    "\120\066\133\074\126\075\121\001\002\000\004\071\212" +
    "\001\002\000\032\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\027\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2\074\uffb2" +
    "\075\uffb2\001\002\000\014\062\071\063\072\064\074\065" +
    "\073\066\076\001\002\000\014\062\071\063\072\064\074" +
    "\065\073\066\076\001\002\000\004\060\216\001\002\000" +
    "\032\016\136\017\132\020\137\021\140\022\134\027\116" +
    "\062\131\064\135\065\120\066\133\074\126\075\121\001" +
    "\002\000\004\071\220\001\002\000\032\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\022\uffb3\027\uffb3\062\uffb3\064\uffb3\065" +
    "\uffb3\066\uffb3\074\uffb3\075\uffb3\001\002\000\004\060\222" +
    "\001\002\000\032\016\136\017\132\020\137\021\140\022" +
    "\134\027\116\062\131\064\135\065\120\066\133\074\126" +
    "\075\121\001\002\000\004\071\224\001\002\000\032\016" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\027\uffb1\062\uffb1" +
    "\064\uffb1\065\uffb1\066\uffb1\074\uffb1\075\uffb1\001\002\000" +
    "\004\027\226\001\002\000\004\066\227\001\002\000\004" +
    "\072\230\001\002\000\032\016\136\017\132\020\137\021" +
    "\140\022\134\027\116\062\131\064\135\065\120\066\133" +
    "\074\126\075\121\001\002\000\004\027\232\001\002\000" +
    "\032\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\027\uffac" +
    "\062\uffac\064\uffac\065\uffac\066\uffac\074\uffac\075\uffac\001" +
    "\002\000\004\066\uffca\001\002\000\004\066\uffc9\001\002" +
    "\000\004\066\uffc5\001\002\000\004\066\uffc8\001\002\000" +
    "\004\066\244\001\002\000\004\066\uffc6\001\002\000\004" +
    "\066\uffc7\001\002\000\014\062\071\063\072\064\074\065" +
    "\073\066\076\001\002\000\032\016\uffa5\017\uffa5\020\uffa5" +
    "\021\uffa5\022\uffa5\027\uffa5\062\uffa5\064\uffa5\065\uffa5\066" +
    "\uffa5\074\uffa5\075\uffa5\001\002\000\032\016\uffa6\017\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\027\uffa6\062\uffa6\064\uffa6\065" +
    "\uffa6\066\uffa6\074\uffa6\075\uffa6\001\002\000\012\044\150" +
    "\045\147\046\146\050\151\001\002\000\004\051\247\001" +
    "\002\000\004\060\250\001\002\000\032\016\136\017\132" +
    "\020\137\021\140\022\134\027\116\062\131\064\135\065" +
    "\120\066\133\074\126\075\121\001\002\000\004\073\252" +
    "\001\002\000\032\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022" +
    "\uffb0\027\uffb0\062\uffb0\064\uffb0\065\uffb0\066\uffb0\074\uffb0" +
    "\075\uffb0\001\002\000\010\062\131\064\135\065\120\001" +
    "\002\000\010\062\131\064\135\065\120\001\002\000\042" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\027\uffa2\030" +
    "\uffa2\031\uffa2\032\256\033\257\062\uffa2\064\uffa2\065\uffa2" +
    "\066\uffa2\074\uffa2\075\uffa2\001\002\000\010\062\131\064" +
    "\135\065\120\001\002\000\010\062\131\064\135\065\120" +
    "\001\002\000\042\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\062\uff9f" +
    "\064\uff9f\065\uff9f\066\uff9f\074\uff9f\075\uff9f\001\002\000" +
    "\042\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\027\uffa0" +
    "\030\uffa0\031\uffa0\032\uffa0\033\uffa0\062\uffa0\064\uffa0\065" +
    "\uffa0\066\uffa0\074\uffa0\075\uffa0\001\002\000\042\016\uffa3" +
    "\017\uffa3\020\uffa3\021\uffa3\022\uffa3\027\uffa3\030\uffa3\031" +
    "\uffa3\032\256\033\257\062\uffa3\064\uffa3\065\uffa3\066\uffa3" +
    "\074\uffa3\075\uffa3\001\002\000\010\002\ufffd\004\ufffd\005" +
    "\ufffd\001\002\000\004\066\265\001\002\000\004\070\266" +
    "\001\002\000\032\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\027\uffb4\062\uffb4\064\uffb4\065\uffb4\066\uffb4\074\uffb4" +
    "\075\uffb4\001\002\000\032\016\136\017\132\020\137\021" +
    "\140\022\134\027\116\062\131\064\135\065\120\066\133" +
    "\074\126\075\121\001\002\000\032\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\022\uffab\027\uffab\062\uffab\064\uffab\065\uffab" +
    "\066\uffab\074\uffab\075\uffab\001\002\000\046\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\053\uffb9\062\uffb9\064\uffb9\065\uffb9\066\uffb9\071" +
    "\uffb9\073\uffb9\074\uffb9\075\uffb9\001\002\000\004\053\273" +
    "\001\002\000\010\002\ufffc\004\ufffc\005\ufffc\001\002\000" +
    "\004\051\ufff5\001\002\000\016\006\026\007\031\010\023" +
    "\011\022\012\027\052\276\001\002\000\032\016\136\017" +
    "\132\020\137\021\140\022\134\027\116\062\131\064\135" +
    "\065\120\066\133\074\126\075\121\001\002\000\004\052" +
    "\300\001\002\000\032\016\136\017\132\020\137\021\140" +
    "\022\134\027\116\062\131\064\135\065\120\066\133\074" +
    "\126\075\121\001\002\000\004\053\302\001\002\000\010" +
    "\002\ufffe\004\ufffe\005\ufffe\001\002\000\004\053\304\001" +
    "\002\000\010\002\ufffb\004\ufffb\005\ufffb\001\002\000\004" +
    "\066\306\001\002\000\014\013\ufff3\014\ufff3\015\ufff3\051" +
    "\ufff3\056\307\001\002\000\012\013\ufff4\014\ufff4\015\ufff4" +
    "\051\ufff4\001\002\000\004\002\001\001\002\000\004\050" +
    "\312\001\002\000\012\013\014\014\015\015\020\051\314" +
    "\001\002\000\004\051\324\001\002\000\016\006\026\007" +
    "\031\010\023\011\022\012\027\052\315\001\002\000\032" +
    "\016\136\017\132\020\137\021\140\022\134\027\116\062" +
    "\131\064\135\065\120\066\133\074\126\075\121\001\002" +
    "\000\004\052\317\001\002\000\032\016\136\017\132\020" +
    "\137\021\140\022\134\027\116\062\131\064\135\065\120" +
    "\066\133\074\126\075\121\001\002\000\004\053\321\001" +
    "\002\000\010\002\ufff8\004\ufff8\005\ufff8\001\002\000\004" +
    "\053\323\001\002\000\010\002\ufff7\004\ufff7\005\ufff7\001" +
    "\002\000\016\006\026\007\031\010\023\011\022\012\027" +
    "\052\325\001\002\000\032\016\136\017\132\020\137\021" +
    "\140\022\134\027\116\062\131\064\135\065\120\066\133" +
    "\074\126\075\121\001\002\000\004\052\327\001\002\000" +
    "\032\016\136\017\132\020\137\021\140\022\134\027\116" +
    "\062\131\064\135\065\120\066\133\074\126\075\121\001" +
    "\002\000\004\053\331\001\002\000\010\002\ufffa\004\ufffa" +
    "\005\ufffa\001\002\000\004\053\333\001\002\000\010\002" +
    "\ufff9\004\ufff9\005\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\006\002\004\003\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\007" +
    "\003\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\016\007\012\022\015\001\001\000\004\010\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\016\007\012\022\273\001\001\000\002" +
    "\001\001\000\010\005\024\010\027\013\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\114\017\140" +
    "\023\126\024\116\025\124\027\127\030\271\032\123\034" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\034\016\037\035\035\036\036\001" +
    "\001\000\002\001\001\000\010\005\032\010\027\013\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\034\016\037\035\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\052\015" +
    "\051\001\001\000\002\001\001\000\006\014\062\015\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\114\017" +
    "\140\023\126\024\116\025\124\027\127\030\122\032\123" +
    "\034\121\001\001\000\024\006\114\017\140\023\126\024" +
    "\116\025\124\027\127\030\270\032\123\034\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\114\017\140\023\126" +
    "\024\116\025\124\027\127\030\174\032\123\034\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\144" +
    "\026\142\033\143\001\001\000\002\001\001\000\010\020" +
    "\144\026\164\033\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\151\001\001\000\004\012\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\114\017\140" +
    "\023\126\024\116\025\124\027\127\030\167\032\123\034" +
    "\121\001\001\000\002\001\001\000\024\006\114\017\140" +
    "\023\126\024\116\025\124\027\127\030\172\032\123\034" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\144\033\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\206\001\001\000\002\001\001" +
    "\000\024\006\114\017\140\023\126\024\116\025\124\027" +
    "\127\030\210\032\123\034\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\220\001\001\000\004\021" +
    "\214\001\001\000\002\001\001\000\024\006\114\017\140" +
    "\023\126\024\116\025\124\027\127\030\216\032\123\034" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\114\017\140\023\126\024\116\025" +
    "\124\027\127\030\222\032\123\034\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\114\017\140\023\126" +
    "\024\116\025\124\027\127\030\230\032\123\034\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\144\033\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\114\017\140\023\126\024\116\025" +
    "\124\027\127\030\250\032\123\034\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\261\025\124\001" +
    "\001\000\006\024\254\025\124\001\001\000\002\001\001" +
    "\000\004\025\260\001\001\000\004\025\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\114\017\140\023\126\024\116\025\124" +
    "\027\127\030\267\032\123\034\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\276\010\027\013\031\001" +
    "\001\000\024\006\114\017\140\023\126\024\116\025\124" +
    "\027\127\030\302\032\123\034\121\001\001\000\002\001" +
    "\001\000\024\006\114\017\140\023\126\024\116\025\124" +
    "\027\127\030\300\032\123\034\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\016\007\012" +
    "\022\312\001\001\000\002\001\001\000\010\005\315\010" +
    "\027\013\031\001\001\000\024\006\114\017\140\023\126" +
    "\024\116\025\124\027\127\030\321\032\123\034\121\001" +
    "\001\000\002\001\001\000\024\006\114\017\140\023\126" +
    "\024\116\025\124\027\127\030\317\032\123\034\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\325\010\027\013\031\001" +
    "\001\000\024\006\114\017\140\023\126\024\116\025\124" +
    "\027\127\030\331\032\123\034\121\001\001\000\002\001" +
    "\001\000\024\006\114\017\140\023\126\024\116\025\124" +
    "\027\127\030\327\032\123\034\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntacticAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntacticAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticAnalyzer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String result="";
    String temporal = "" ; 
    String temporal2="";
    String temporal3="";
    String temporalvalor="";
    String envget="false";
    String enviaset="false";
    String hereda="";
    String guardo="";
    String consulta="";
    String valorsigno="";
    String valoracceder="";
    String valoraccederid="";
    String serialcondicion="";
    String insertarvalores="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        result +="\n!!!!!!! Error Sintactico Recuperado !!!!!!!\t\tLexema: "+lexema+"\t\tFila: "+fila+"\t\tColumna: "+columna;
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        result +="\n!!!!!!! Error Sintactico, Panic Mode !!!!!!!\t\tLexema: "+lexema+"\t\tFila: "+fila+"\t\tColumna: "+columna;
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SyntacticAnalyzer$actions {



  private final SyntacticAnalyzer parser;

  /** Constructor */
  CUP$SyntacticAnalyzer$actions(SyntacticAnalyzer parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntacticAnalyzer$do_action_part00000000(
    int                        CUP$SyntacticAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticAnalyzer$parser,
    java.util.Stack            CUP$SyntacticAnalyzer$stack,
    int                        CUP$SyntacticAnalyzer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntacticAnalyzer$parser.done_parsing();
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INICIO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= INICIO S 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= procedure id parentesis_abierto ARGUMENTO parentesis_cerrado DEFVARS llave_abierta INSTRUCCIONES1 llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= procedure id parentesis_abierto parentesis_cerrado DEFVARS llave_abierta INSTRUCCIONES1 llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= procedure id parentesis_abierto parentesis_cerrado llave_abierta INSTRUCCIONES1 llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= procedure id parentesis_abierto ARGUMENTO parentesis_cerrado llave_abierta INSTRUCCIONES1 llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= function id parentesis_abierto ARGUMENTO parentesis_cerrado DEFVARS llave_abierta INSTRUCCIONES1 llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= function id parentesis_abierto ARGUMENTO parentesis_cerrado llave_abierta INSTRUCCIONES1 llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= function id parentesis_abierto parentesis_cerrado DEFVARS llave_abierta INSTRUCCIONES1 llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= function id parentesis_abierto parentesis_cerrado llave_abierta INSTRUCCIONES1 llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ARGUMENTO ::= ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",16, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ARGUMENTO ::= ARGUMENTOS ARGUMENTO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",16, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARGUMENTOS ::= REFERENCIA TIPODATO id coma 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",2, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARGUMENTOS ::= REFERENCIA TIPODATO id 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",2, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // REFERENCIA ::= parametro_entrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("REFERENCIA",5, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // REFERENCIA ::= parametro_salida 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("REFERENCIA",5, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // REFERENCIA ::= parametro_entada_salida 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("REFERENCIA",5, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ELEMENTO ::= ELEMENTOS 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTO",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ELEMENTO ::= ELEMENTOS ELEMENTO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTO",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ELEMENTOS ::= entero coma 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ELEMENTOS ::= entero 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELEMENTOS ::= comilla_abierta id comilla_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELEMENTOS ::= comilla_abierta id comilla_cerrada coma 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELEMENTOS ::= id coma 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPODATO ::= int_type 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("TIPODATO",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPODATO ::= char_type 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("TIPODATO",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPODATO ::= float_type 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("TIPODATO",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPODATO ::= boolean_type 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("TIPODATO",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPODATO ::= string_type 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("TIPODATO",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VECTOR ::= id corchete_abierto corchete_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VECTOR",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VECTOR ::= id corchete_abierto entero corchete_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VECTOR",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VECTOR ::= id corchete_abierto id corchete_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VECTOR",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VECTOR ::= id corchete_abierto corchete_cerrado asignacion llave_abierta ELEMENTO llave_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VECTOR",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VECTOR ::= id corchete_abierto entero corchete_cerrado asignacion EXPRESION_REG 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VECTOR",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VECTOR ::= id corchete_abierto id corchete_cerrado asignacion EXPRESION_REG 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VECTOR",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MATRIZ ::= id corchete_abierto corchete_cerrado corchete_abierto corchete_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MATRIZ",12, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MATRIZ ::= id corchete_abierto entero corchete_cerrado corchete_abierto entero corchete_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MATRIZ",12, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MATRIZ ::= id corchete_abierto id corchete_cerrado corchete_abierto id corchete_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MATRIZ",12, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MATRIZ ::= id corchete_abierto entero corchete_cerrado corchete_abierto id corchete_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MATRIZ",12, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MATRIZ ::= id corchete_abierto id corchete_cerrado corchete_abierto entero corchete_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("MATRIZ",12, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DEFVARS ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DEFVARS",3, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DEFVARS ::= DEFVAR DEFVARS 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DEFVARS",3, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DEFVAR ::= TIPODATO VARS 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DEFVAR",9, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VARS ::= VARS VAR 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VARS",28, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VARS ::= VAR 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VARS",28, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VAR ::= id 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VAR",27, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VAR ::= letra 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VAR",27, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VAR ::= MATRIZ 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VAR",27, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VAR ::= VECTOR 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VAR",27, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION_REG ::= digito 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("EXPRESION_REG",15, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION_REG ::= numero 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("EXPRESION_REG",15, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION_REG ::= entero 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("EXPRESION_REG",15, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION_REG ::= id 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("EXPRESION_REG",15, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION_REG ::= letra 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("EXPRESION_REG",15, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERADOR_MATEMATICO ::= suma 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_MATEMATICO",23, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERADOR_MATEMATICO ::= resta 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_MATEMATICO",23, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERADOR_MATEMATICO ::= multiplicacion 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_MATEMATICO",23, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERADOR_MATEMATICO ::= division 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_MATEMATICO",23, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERADOR_MATEMATICO ::= potencia 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_MATEMATICO",23, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERADOR_MATEMATICO ::= modulo 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_MATEMATICO",23, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERADOR_LOGICO ::= menor 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERADOR_LOGICO ::= mayor 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERADOR_LOGICO ::= comparacion 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERADOR_LOGICO ::= menor_igual 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERADOR_LOGICO ::= mayor_igual 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERADOR_LOGICO ::= diferente 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERADOR_LOGICO ::= not 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERADOR_RELACIONAL ::= and 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERADOR_RELACIONAL ::= or 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERADOR_RELACIONAL ::= not 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INSTRUCCIONES1 ::= lambda 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES1",22, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INSTRUCCIONES1 ::= CUERPITO INSTRUCCIONES1 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES1",22, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CUERPITO ::= CICLO 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CUERPITO",4, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CUERPITO ::= CONDICIONAL 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CUERPITO",4, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CUERPITO ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CUERPITO",4, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CUERPITO ::= OPEMATES 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CUERPITO",4, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CUERPITO ::= imprimir comilla_abierta id comilla_cerrada 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CUERPITO",4, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CICLO ::= ciclo_for id asignacion entero hasta EXPRESION_REG hacer INSTRUCCIONES1 end_for 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CICLO",24, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CICLO ::= ciclo_for id asignacion id hasta EXPRESION_REG hacer INSTRUCCIONES1 end_for 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CICLO",24, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CICLO ::= ciclo_for id asignacion entero down_to EXPRESION_REG hacer INSTRUCCIONES1 end_for 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CICLO",24, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CICLO ::= ciclo_while parentesis_abierto CONDICION parentesis_cerrado hacer INSTRUCCIONES1 end_while 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CICLO",24, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CICLO ::= ciclo_repeat INSTRUCCIONES1 condicional_until parentesis_abierto CONDICION parentesis_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CICLO",24, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONDICIONAL ::= condicional_if parentesis_abierto CONDICION11 parentesis_cerrado then INSTRUCCIONES1 end_if 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",26, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONDICIONAL ::= condicional_if parentesis_abierto CONDICION11 parentesis_cerrado then INSTRUCCIONES1 sino INSTRUCCIONES1 end_if 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",26, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONDICIONAL ::= condicional_switch id caso id dos_puntos INSTRUCCIONES1 caso 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",26, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONDICIONAL ::= caso id INSTRUCCIONES1 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",26, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONDICION11 ::= CONDICION 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CONDICION11",20, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONDICION11 ::= CONDICION CONDICION11 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CONDICION11",20, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONDICION ::= parentesis_abierto EXPRESION_REG OPERADOR_LOGICO EXPRESION_REG parentesis_cerrado 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CONDICION",25, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONDICION ::= OPERADOR_RELACIONAL 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CONDICION",25, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPEMATES ::= id OPERADOR_MATEMATICO id 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPEMATES",13, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ASIGNACION ::= id asignacion EXPRESION_REG 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ASIGNACION",21, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ASIGNACION ::= E 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ASIGNACION",21, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= E suma T 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= E resta T 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= T 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // T ::= T multiplicacion F 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // T ::= T division F 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // T ::= F 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // F ::= digito 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("F",19, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // F ::= numero 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("F",19, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // F ::= entero 
            {
              Object RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("F",19, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntacticAnalyzer$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticAnalyzer$do_action(
    int                        CUP$SyntacticAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticAnalyzer$parser,
    java.util.Stack            CUP$SyntacticAnalyzer$stack,
    int                        CUP$SyntacticAnalyzer$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticAnalyzer$do_action_part00000000(
                               CUP$SyntacticAnalyzer$act_num,
                               CUP$SyntacticAnalyzer$parser,
                               CUP$SyntacticAnalyzer$stack,
                               CUP$SyntacticAnalyzer$top);
    }
}

}
