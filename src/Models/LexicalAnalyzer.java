/* The following code was generated by JFlex 1.6.1 */

/*-------------Codigo de Usuario---------------*/
//-------> Paquetes, importaciones:
package Models;
import java_cup.runtime.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;


/*-------------Opciones y Declaraciones-------------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/docs_analyzer/Lexer.jflex</tt>
 */
public class LexicalAnalyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 42, 42, 43, 42, 42,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    24,  0,  0,  0,  0,  0,  0,  0, 34, 35, 27, 25, 40, 26,  3, 28, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 41,  0, 30, 32, 31,  0, 
     0, 18, 16,  7, 15, 14,  4, 22, 19, 10,  2,  2, 17, 33,  6, 11, 
    12,  2, 13, 21,  8,  5,  2, 23,  2,  2,  2, 38,  0, 39, 29,  0, 
     0, 18, 16,  7, 15, 14,  4, 22, 19, 10,  2,  2, 17, 33,  6, 11, 
    12,  2, 13, 21,  8,  5,  2, 23,  2,  2,  2, 36,  0, 37,  0,  0, 
     0,  0,  0,  0,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\6\3\1\1\10\3\1\1\2\3"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\1\1\3\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\0\10\25\1\26\1\25\1\27"+
    "\1\30\1\31\1\27\1\30\1\31\1\32\1\33\4\25"+
    "\1\34\2\25\2\0\3\25\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\25\1\45\1\25\1\46"+
    "\2\25\1\47\1\0\3\25\2\50\1\0\5\25\1\0"+
    "\2\25\1\51\2\0\2\25\1\0\1\25\1\52\2\25"+
    "\1\0\1\25\2\53\1\54\1\55\1\0\4\25\1\0"+
    "\2\56\1\25\2\0\2\25\1\0\2\25\1\57\2\60"+
    "\1\0\1\61\1\25\1\61\3\25\3\0\1\25\2\0"+
    "\2\25\2\62\1\0\1\25\1\0\3\25\1\63\1\0"+
    "\1\64\1\0\1\25\1\65\1\66\1\65\1\66\1\0"+
    "\1\25\1\0\3\25\1\67\1\0\1\70\2\71\1\0"+
    "\2\25\1\72\1\0\2\73\1\74\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\54\0\54\0\u039c"+
    "\0\54\0\54\0\54\0\u03c8\0\u03f4\0\u0420\0\u044c\0\54"+
    "\0\54\0\54\0\54\0\54\0\54\0\54\0\54\0\130"+
    "\0\u0478\0\204\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580"+
    "\0\u05ac\0\204\0\u05d8\0\54\0\u0604\0\54\0\204\0\u0630"+
    "\0\204\0\204\0\204\0\u065c\0\u0688\0\u06b4\0\u06e0\0\204"+
    "\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814\0\54"+
    "\0\54\0\54\0\54\0\54\0\54\0\54\0\54\0\u0840"+
    "\0\u0478\0\u086c\0\204\0\u0898\0\u08c4\0\204\0\u08f0\0\u091c"+
    "\0\u0948\0\u0974\0\54\0\204\0\u09a0\0\u09cc\0\u09f8\0\u0a24"+
    "\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\204\0\u0b2c\0\u0b58"+
    "\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\204\0\u0c34\0\u0c60\0\u0c8c"+
    "\0\u0cb8\0\54\0\204\0\204\0\204\0\u0ce4\0\u0d10\0\u0d3c"+
    "\0\u0d68\0\u0d94\0\u0dc0\0\54\0\204\0\u0dec\0\u0e18\0\u0e44"+
    "\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\204\0\54\0\204"+
    "\0\u0f4c\0\54\0\u0f78\0\204\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028"+
    "\0\u1054\0\u1080\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c\0\54"+
    "\0\204\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264\0\204"+
    "\0\u1290\0\54\0\u12bc\0\u12e8\0\54\0\54\0\204\0\204"+
    "\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\54\0\u141c"+
    "\0\204\0\54\0\204\0\u1448\0\u1474\0\u14a0\0\204\0\u14cc"+
    "\0\54\0\204\0\204\0\54";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\4\1\22\1\4\1\23\1\24\1\4\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\26\56\0\1\50\1\0\1\51\51\0"+
    "\2\52\1\0\5\52\1\0\12\52\1\0\3\52\11\0"+
    "\1\52\13\0\2\52\1\0\1\52\1\53\3\52\1\0"+
    "\1\52\1\54\5\52\1\55\2\52\1\0\3\52\11\0"+
    "\1\52\13\0\2\52\1\0\2\52\1\56\2\52\1\0"+
    "\12\52\1\0\3\52\11\0\1\52\13\0\2\52\1\0"+
    "\5\52\1\0\1\52\1\57\10\52\1\0\3\52\11\0"+
    "\1\52\13\0\2\52\1\0\5\52\1\0\10\52\1\60"+
    "\1\61\1\0\3\52\11\0\1\52\13\0\2\52\1\0"+
    "\5\52\1\0\1\52\1\62\7\52\1\63\1\0\3\52"+
    "\11\0\1\52\16\0\1\64\1\0\1\65\4\0\1\66"+
    "\41\0\2\52\1\0\1\67\1\52\1\70\2\52\1\0"+
    "\1\52\1\71\10\52\1\0\3\52\11\0\1\52\13\0"+
    "\2\52\1\0\1\52\1\72\3\52\1\0\3\52\1\73"+
    "\6\52\1\0\3\52\11\0\1\52\13\0\2\52\1\0"+
    "\5\52\1\0\3\52\1\74\6\52\1\0\3\52\11\0"+
    "\1\52\13\0\2\52\1\0\5\52\1\0\4\52\1\75"+
    "\5\52\1\0\3\52\11\0\1\52\13\0\2\52\1\0"+
    "\2\52\1\76\2\52\1\0\7\52\1\77\2\52\1\0"+
    "\3\52\11\0\1\52\13\0\2\52\1\0\5\52\1\0"+
    "\1\52\1\100\10\52\1\0\3\52\11\0\1\52\13\0"+
    "\2\52\1\0\5\52\1\0\1\52\1\101\10\52\1\0"+
    "\3\52\11\0\1\52\13\0\2\52\1\0\2\52\1\102"+
    "\2\52\1\0\12\52\1\0\3\52\11\0\1\52\22\0"+
    "\1\103\16\0\1\104\25\0\2\52\1\0\4\52\1\105"+
    "\1\0\12\52\1\0\2\52\1\106\11\0\1\52\13\0"+
    "\2\52\1\0\5\52\1\0\11\52\1\107\1\0\3\52"+
    "\11\0\1\52\44\0\1\110\53\0\1\111\3\0\1\112"+
    "\1\113\1\114\52\0\1\115\1\116\53\0\1\117\14\0"+
    "\2\52\1\0\5\52\1\0\1\52\1\120\10\52\1\0"+
    "\3\52\11\0\1\52\13\0\1\121\53\0\2\52\1\0"+
    "\2\52\1\122\2\52\1\0\12\52\1\0\3\52\11\0"+
    "\1\52\13\0\2\52\1\0\5\52\1\0\3\52\1\123"+
    "\6\52\1\0\3\52\11\0\1\52\13\0\2\52\1\0"+
    "\5\52\1\0\1\52\1\124\10\52\1\0\3\52\11\0"+
    "\1\52\13\0\2\52\1\0\4\52\1\125\1\0\12\52"+
    "\1\0\3\52\11\0\1\52\13\0\2\52\1\0\4\52"+
    "\1\126\1\0\12\52\1\0\3\52\11\0\1\52\13\0"+
    "\2\52\1\0\5\52\1\0\12\52\1\127\1\130\2\52"+
    "\11\0\1\52\13\0\2\52\1\0\5\52\1\0\10\52"+
    "\1\131\1\52\1\0\3\52\11\0\1\52\13\0\2\52"+
    "\1\0\5\52\1\0\4\52\1\132\5\52\1\0\3\52"+
    "\11\0\1\52\22\0\1\133\44\0\2\52\1\0\4\52"+
    "\1\134\1\0\12\52\1\0\3\52\11\0\1\52\13\0"+
    "\2\52\1\0\5\52\1\135\1\136\1\137\10\52\1\0"+
    "\3\52\11\0\1\52\13\0\2\52\1\0\4\52\1\140"+
    "\1\0\2\52\1\141\7\52\1\0\3\52\11\0\1\52"+
    "\13\0\2\52\1\0\5\52\1\0\5\52\1\142\4\52"+
    "\1\0\3\52\11\0\1\52\13\0\2\52\1\0\5\52"+
    "\1\0\12\52\1\143\1\144\2\52\11\0\1\52\13\0"+
    "\2\52\1\0\5\52\1\0\1\52\1\145\10\52\1\0"+
    "\3\52\11\0\1\52\13\0\2\52\1\0\5\52\1\0"+
    "\5\52\1\146\4\52\1\0\3\52\11\0\1\52\27\0"+
    "\1\147\47\0\2\150\42\0\2\52\1\0\5\52\1\0"+
    "\3\52\1\151\6\52\1\0\3\52\11\0\1\52\13\0"+
    "\2\52\1\0\5\52\1\150\1\152\11\52\1\0\3\52"+
    "\11\0\1\52\13\0\2\52\1\0\5\52\1\153\1\154"+
    "\11\52\1\0\3\52\11\0\1\52\13\0\2\52\1\0"+
    "\5\52\1\0\5\52\1\155\4\52\1\0\3\52\11\0"+
    "\1\52\13\0\2\52\1\0\3\52\1\156\1\52\1\0"+
    "\12\52\1\0\3\52\11\0\1\52\13\0\2\52\1\0"+
    "\5\52\1\0\10\52\1\157\1\52\1\0\3\52\11\0"+
    "\1\52\13\0\2\52\1\0\5\52\1\160\1\161\11\52"+
    "\1\0\3\52\11\0\1\52\30\0\1\162\36\0\2\52"+
    "\1\0\5\52\1\0\4\52\1\163\5\52\1\0\3\52"+
    "\11\0\1\52\13\0\2\52\1\0\5\52\1\0\3\52"+
    "\1\164\6\52\1\0\3\52\11\0\1\52\13\0\2\52"+
    "\1\0\2\52\1\165\2\52\1\0\12\52\1\0\3\52"+
    "\11\0\1\52\20\0\1\166\46\0\2\52\1\0\2\52"+
    "\1\167\2\52\1\0\12\52\1\0\3\52\11\0\1\52"+
    "\13\0\2\52\1\0\3\52\1\170\1\52\1\0\12\52"+
    "\1\0\3\52\11\0\1\52\13\0\2\52\1\0\5\52"+
    "\1\0\1\52\1\171\10\52\1\0\3\52\11\0\1\52"+
    "\13\0\2\52\1\0\5\52\1\0\4\52\1\172\5\52"+
    "\1\0\3\52\11\0\1\52\13\0\2\52\1\0\5\52"+
    "\1\0\12\52\1\0\3\52\1\173\10\0\1\52\30\0"+
    "\1\174\36\0\2\52\1\0\5\52\1\0\4\52\1\175"+
    "\5\52\1\0\3\52\11\0\1\52\13\0\2\52\1\0"+
    "\5\52\1\0\7\52\1\176\2\52\1\0\3\52\11\0"+
    "\1\52\23\0\2\177\51\0\1\200\44\0\2\52\1\0"+
    "\5\52\1\177\1\201\11\52\1\0\3\52\11\0\1\52"+
    "\13\0\2\52\1\0\4\52\1\202\1\0\12\52\1\0"+
    "\3\52\11\0\1\52\33\0\1\203\33\0\2\52\1\0"+
    "\5\52\1\0\7\52\1\204\2\52\1\0\3\52\11\0"+
    "\1\52\13\0\2\52\1\0\4\52\1\205\1\0\12\52"+
    "\1\0\3\52\11\0\1\52\13\0\2\52\1\0\4\52"+
    "\1\206\1\0\12\52\1\0\3\52\11\0\1\52\33\0"+
    "\1\207\33\0\2\52\1\0\5\52\1\0\7\52\1\210"+
    "\2\52\1\0\3\52\11\0\1\52\21\0\1\211\1\212"+
    "\44\0\2\52\1\0\3\52\1\213\1\214\1\0\12\52"+
    "\1\0\3\52\11\0\1\52\13\0\2\52\1\0\5\52"+
    "\1\0\4\52\1\215\5\52\1\0\3\52\11\0\1\52"+
    "\13\0\2\52\1\0\5\52\1\0\3\52\1\216\6\52"+
    "\1\0\3\52\11\0\1\52\13\0\2\52\1\0\5\52"+
    "\1\0\10\52\1\217\1\52\1\0\3\52\11\0\1\52"+
    "\16\0\1\220\4\0\2\221\14\0\1\222\25\0\2\52"+
    "\1\0\5\52\1\0\4\52\1\223\5\52\1\0\3\52"+
    "\11\0\1\52\20\0\1\224\54\0\1\225\45\0\2\52"+
    "\1\0\2\52\1\226\2\52\1\0\12\52\1\0\3\52"+
    "\11\0\1\52\13\0\2\52\1\0\3\52\1\227\1\52"+
    "\1\0\12\52\1\0\3\52\11\0\1\52\30\0\1\230"+
    "\36\0\2\52\1\0\5\52\1\0\4\52\1\231\5\52"+
    "\1\0\3\52\11\0\1\52\13\0\2\52\1\0\5\52"+
    "\1\232\1\233\11\52\1\0\3\52\11\0\1\52\23\0"+
    "\2\234\42\0\2\52\1\0\5\52\1\234\1\235\11\52"+
    "\1\0\3\52\11\0\1\52\13\0\2\52\1\0\5\52"+
    "\1\0\5\52\1\236\4\52\1\0\3\52\11\0\1\52"+
    "\13\0\2\52\1\0\2\52\1\237\2\52\1\0\12\52"+
    "\1\0\3\52\11\0\1\52\13\0\2\52\1\0\4\52"+
    "\1\240\1\0\12\52\1\0\3\52\11\0\1\52\25\0"+
    "\1\241\44\0\1\242\72\0\1\243\31\0\2\52\1\0"+
    "\5\52\1\0\10\52\1\244\1\52\1\0\3\52\11\0"+
    "\1\52\40\0\1\245\50\0\1\246\31\0\2\52\1\0"+
    "\5\52\1\0\12\52\1\0\1\52\1\247\1\52\11\0"+
    "\1\52\13\0\2\52\1\0\5\52\1\0\11\52\1\250"+
    "\1\0\3\52\11\0\1\52\25\0\1\251\41\0\2\52"+
    "\1\0\5\52\1\0\1\52\1\252\10\52\1\0\3\52"+
    "\11\0\1\52\26\0\1\253\40\0\2\52\1\0\5\52"+
    "\1\0\2\52\1\254\7\52\1\0\3\52\11\0\1\52"+
    "\13\0\2\52\1\0\1\52\1\255\3\52\1\0\12\52"+
    "\1\0\3\52\11\0\1\52\13\0\2\52\1\0\5\52"+
    "\1\0\10\52\1\256\1\52\1\0\3\52\11\0\1\52"+
    "\27\0\1\257\47\0\2\260\42\0\2\52\1\0\2\52"+
    "\1\261\2\52\1\0\12\52\1\0\3\52\11\0\1\52"+
    "\20\0\1\262\46\0\2\52\1\0\2\52\1\263\2\52"+
    "\1\0\12\52\1\0\3\52\11\0\1\52\34\0\1\264"+
    "\32\0\2\52\1\0\5\52\1\0\10\52\1\265\1\52"+
    "\1\0\3\52\11\0\1\52\13\0\2\52\1\0\5\52"+
    "\1\0\3\52\1\266\6\52\1\0\3\52\11\0\1\52"+
    "\13\0\2\52\1\0\5\52\1\0\3\52\1\267\6\52"+
    "\1\0\3\52\11\0\1\52\33\0\1\270\53\0\1\271"+
    "\33\0\2\52\1\0\5\52\1\0\7\52\1\272\2\52"+
    "\1\0\3\52\11\0\1\52\13\0\2\52\1\0\5\52"+
    "\1\0\4\52\1\273\5\52\1\0\3\52\11\0\1\52"+
    "\30\0\1\274\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5368];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\2\11\1\1\3\11\4\1\10\11"+
    "\1\1\1\0\12\1\1\11\1\1\1\11\14\1\2\0"+
    "\3\1\10\11\7\1\1\0\3\1\1\11\1\1\1\0"+
    "\5\1\1\0\3\1\2\0\2\1\1\0\4\1\1\0"+
    "\1\1\1\11\3\1\1\0\4\1\1\0\1\11\2\1"+
    "\2\0\2\1\1\0\3\1\1\11\1\1\1\0\1\11"+
    "\5\1\3\0\1\1\2\0\2\1\1\11\1\1\1\0"+
    "\1\1\1\0\4\1\1\0\1\11\1\0\1\1\2\11"+
    "\2\1\1\0\1\1\1\0\3\1\1\11\1\0\1\1"+
    "\1\11\1\1\1\0\3\1\1\0\1\11\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
//-----> Codigo de usuario en sintaxis java
public String showResult = "";
 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Symbols.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("\nError Lexico: "+yytext()+" Linea: "+yyline+" Columna: "+yycolumn); showResult += "\n Error Lexico: " + yytext() + " Linea: " + (yyline+1)  + " Columna: " + (yycolumn+1) + "\n";
            }
          case 62: break;
          case 2: 
            { System.out.println("Token "+yytext()+" digito"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.digito, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 3: 
            { System.out.println("Token "+yytext()+" letra"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.letra, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 4: 
            { /* Espacios en blanco, se ignoran */
            }
          case 65: break;
          case 5: 
            { System.out.println("Token correcto: "+yytext()+" suma"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.suma, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 6: 
            { System.out.println("Token correcto: "+yytext()+" resta"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.resta, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 7: 
            { System.out.println("Token correcto: "+yytext()+" multiplicacion"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.multiplicacion, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 8: 
            { System.out.println("Token correcto: "+yytext()+" division"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.division, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 9: 
            { System.out.println("Token correcto: "+yytext()+" potencia"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.potencia, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 10: 
            { System.out.println("Token correcto: "+yytext()+" menor"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.menor, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 11: 
            { System.out.println("Token correcto: "+yytext()+" mayor"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.mayor, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 12: 
            { System.out.println("Token correcto: "+yytext()+" parentesisabre"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.parentesis_abierto, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 13: 
            { System.out.println("Token correcto: "+yytext()+" parentesiscierra"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.parentesis_cerrado, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 14: 
            { System.out.println("Token correcto: "+yytext()+" llaveabre"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.llave_abierta, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 15: 
            { System.out.println("Token correcto: "+yytext()+" llavecierra"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.llave_cerrada, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 16: 
            { System.out.println("Token correcto: "+yytext()+" corcheteabre"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.corchete_abierto, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 17: 
            { System.out.println("Token correcto: "+yytext()+" corchetecierra"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.corchete_cerrado, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 18: 
            { System.out.println("Token correcto: "+yytext()+" coma"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.coma, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 19: 
            { System.out.println("Token correcto: "+yytext()+"puntos"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.dos_puntos, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 20: 
            { System.out.println("Token "+yytext()+" enero"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.entero, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 21: 
            { System.out.println("Token "+yytext()+" id"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.id, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 22: 
            { System.out.println("Token correcto: "+yytext()+" hasta"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.hasta, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 23: 
            { System.out.println("Token correcto: "+yytext()+" condicional_if"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.condicional_if, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 24: 
            { System.out.println("Token correcto: "+yytext()+" parametro_entrada"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.parametro_entrada, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 25: 
            { System.out.println("Token correcto: "+yytext()+" parametro_entada_salida"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.parametro_entada_salida, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 26: 
            { System.out.println("Token correcto: "+yytext()+" parametro_salida"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.parametro_salida, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 27: 
            { System.out.println("Token correcto: "+yytext()+" o logico"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.or, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 28: 
            { System.out.println("Token correcto: "+yytext()+" hacer"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.hacer, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 29: 
            { System.out.println("Token correcto: "+yytext()+"lambda"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.lambda, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 30: 
            { System.out.println("Token correcto: "+yytext()+" asignacion"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.asignacion, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 31: 
            { System.out.println("Token correcto: "+yytext()+" comilla_abierta"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.comilla_abierta, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 32: 
            { System.out.println("Token correcto: "+yytext()+" diferente"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.diferente, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 33: 
            { System.out.println("Token correcto: "+yytext()+" menor igual"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.menor_igual, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 34: 
            { System.out.println("Token correcto: "+yytext()+" comilla_cerrada"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.comilla_cerrada, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 35: 
            { System.out.println("Token correcto: "+yytext()+" mayor igual"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.mayor_igual, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 36: 
            { System.out.println("Token correcto: "+yytext()+" comparacion"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.comparacion, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 37: 
            { System.out.println("Token "+yytext()+" numero"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.numero, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 38: 
            { System.out.println("Token correcto: "+yytext()+" ciclo_for"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.ciclo_for, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 39: 
            { System.out.println("Token correcto: "+yytext()+" no logico"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.not, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 40: 
            { System.out.println("Token correcto: "+yytext()+" int"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.int_type, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 41: 
            { System.out.println("Token correcto: "+yytext()+" y logico"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.and, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 42: 
            { System.out.println("Token correcto: "+yytext()+" modulo"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.modulo, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 43: 
            { System.out.println("Token correcto: "+yytext()+" end case"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.caso, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 44: 
            { System.out.println("Token correcto: "+yytext()+" char"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.char_type, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 45: 
            { System.out.println("Token correcto: "+yytext()+" then"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.then, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 46: 
            { System.out.println("Token correcto: "+yytext()+" else"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.sino, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 47: 
            { System.out.println("Token correcto: "+yytext()+" float"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.float_type, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 48: 
            { System.out.println("Token correcto: "+yytext()+" condicional_until"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.condicional_until, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 49: 
            { System.out.println("Token correcto: "+yytext()+" imprimir"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.imprimir, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 50: 
            { System.out.println("Token correcto: "+yytext()+" ciclo_while"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.ciclo_while, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 51: 
            { System.out.println("Token correcto: "+yytext()+" ciclo_repeat"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.ciclo_repeat, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 52: 
            { System.out.println("Token correcto: "+yytext()+" end if"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.end_if, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 53: 
            { System.out.println("Token correcto: "+yytext()+" string"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.string_type, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 54: 
            { System.out.println("Token correcto: "+yytext()+" condicional_switch"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.condicional_switch, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 55: 
            { System.out.println("Token correcto: "+yytext()+" end for"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.end_for, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 56: 
            { System.out.println("Token correcto: "+yytext()+" boolean_type"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.boolean_type, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 57: 
            { System.out.println("Token correcto: "+yytext()+" function"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.function, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 58: 
            { System.out.println("Token correcto: "+yytext()+"retorno"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.retorno, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 59: 
            { System.out.println("Token correcto: "+yytext()+"principal"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.principal, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 60: 
            { System.out.println("Token correcto: "+yytext()+" procedure"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.procedure, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 61: 
            { System.out.println("Token correcto: "+yytext()+"end_while"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.end_while, yycolumn, yyline, yytext());
            }
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
