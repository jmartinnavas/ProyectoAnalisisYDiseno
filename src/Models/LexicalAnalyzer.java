/* The following code was generated by JFlex 1.6.1 */

/*-------------Codigo de Usuario---------------*/
//-------> Paquetes, importaciones:
package Models;
import java_cup.runtime.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;


/*-------------Opciones y Declaraciones-------------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/docs_analyzer/Lexer.jflex</tt>
 */
public class LexicalAnalyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 47, 47, 48, 47, 47,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    24,  0,  0,  0,  0, 39,  0,  0, 40, 41, 32, 30, 46, 31,  3, 33, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 35, 37, 36,  0, 
     0, 18, 16,  7, 15, 14,  4, 22, 19, 10,  2, 27, 17, 38,  6, 11, 
    12, 28, 13, 21,  8,  5, 29, 23,  2, 25,  2, 44,  0, 45, 34,  0, 
     0, 18, 16,  7, 15, 14,  4, 22, 19, 10,  2, 27, 17, 38,  6, 11, 
    12, 28, 13, 21,  8,  5, 29, 23,  2, 25,  2, 42,  0, 43,  0,  0, 
     0,  0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\6\3\2\4\1\5\7\3\1\1"+
    "\3\3\1\6\1\3\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\1\1\3\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\0\12\27\1\30"+
    "\2\27\1\31\1\0\1\32\1\31\1\27\1\32\1\33"+
    "\4\27\1\0\1\27\1\34\2\27\1\0\3\27\3\0"+
    "\6\27\1\35\1\36\1\37\1\40\1\41\1\27\1\42"+
    "\1\27\1\43\3\27\1\44\1\45\1\0\5\27\1\46"+
    "\1\47\1\46\1\47\1\0\5\27\1\0\1\27\2\50"+
    "\1\27\1\51\1\27\1\0\1\27\1\52\1\27\2\0"+
    "\1\53\1\0\2\27\1\53\2\27\1\0\2\27\1\54"+
    "\2\27\1\0\1\27\1\0\1\27\1\0\1\27\1\55"+
    "\1\56\1\57\1\60\1\0\4\27\1\0\2\61\2\27"+
    "\2\62\1\27\3\0\4\27\1\0\3\27\1\63\2\64"+
    "\2\65\1\0\2\66\3\27\2\0\2\27\1\67\1\0"+
    "\1\70\1\0\1\27\1\70\1\27\1\71\2\72\1\73"+
    "\1\0\1\27\1\0\1\27\1\74\1\75\1\0\1\76"+
    "\1\77\1\27\1\100\1\101\1\100\1\101\1\0\1\27"+
    "\1\102\1\27\1\0\1\103\2\104\1\27\1\105\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\61"+
    "\0\u0467\0\61\0\61\0\61\0\61\0\61\0\u0498\0\u04c9"+
    "\0\u04fa\0\u052b\0\61\0\61\0\61\0\61\0\61\0\61"+
    "\0\61\0\61\0\142\0\u055c\0\223\0\u058d\0\u05be\0\u05ef"+
    "\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\223\0\u0746"+
    "\0\u0777\0\61\0\u07a8\0\61\0\223\0\u07d9\0\223\0\223"+
    "\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961"+
    "\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9"+
    "\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\61\0\61"+
    "\0\61\0\61\0\61\0\u0c40\0\u055c\0\u0c71\0\223\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\223\0\223\0\u0d35\0\u0d66\0\u0d97\0\u0dc8"+
    "\0\u0df9\0\u0e2a\0\61\0\61\0\223\0\223\0\u0e5b\0\u0e8c"+
    "\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\61\0\223"+
    "\0\u0fe3\0\223\0\u1014\0\u1045\0\u1076\0\223\0\u10a7\0\u10d8"+
    "\0\u1109\0\61\0\u113a\0\u116b\0\u119c\0\223\0\u11cd\0\u11fe"+
    "\0\u122f\0\u1260\0\u1291\0\223\0\u12c2\0\u12f3\0\u1324\0\u1355"+
    "\0\u1386\0\u13b7\0\u13e8\0\u1419\0\223\0\223\0\223\0\223"+
    "\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\61\0\223"+
    "\0\u1570\0\u15a1\0\61\0\223\0\u15d2\0\u1603\0\u1634\0\u1665"+
    "\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\223\0\61\0\223\0\61\0\223\0\u181e\0\61\0\223"+
    "\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\223"+
    "\0\u19a6\0\61\0\u19d7\0\u1a08\0\223\0\u1a39\0\223\0\61"+
    "\0\223\0\223\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\223\0\223"+
    "\0\u1b2e\0\61\0\223\0\u1b5f\0\61\0\61\0\223\0\223"+
    "\0\u1b90\0\u1bc1\0\61\0\u1bf2\0\u1c23\0\223\0\61\0\223"+
    "\0\u1c54\0\61\0\223";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\4\1\24\1\25\1\26\1\27"+
    "\1\30\1\4\1\2\1\4\1\31\1\4\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\30"+
    "\63\0\1\53\1\0\1\54\56\0\2\55\1\0\5\55"+
    "\1\0\12\55\1\0\3\55\1\0\1\55\1\0\3\55"+
    "\10\0\1\55\13\0\2\55\1\0\1\55\1\56\3\55"+
    "\1\0\1\55\1\57\5\55\1\60\1\61\1\55\1\0"+
    "\3\55\1\0\1\55\1\0\3\55\10\0\1\55\13\0"+
    "\2\55\1\0\2\55\1\62\2\55\1\0\12\55\1\0"+
    "\3\55\1\0\1\55\1\0\3\55\10\0\1\55\13\0"+
    "\2\55\1\0\5\55\1\0\1\55\1\63\10\55\1\0"+
    "\3\55\1\0\1\55\1\0\3\55\10\0\1\55\13\0"+
    "\2\55\1\0\5\55\1\0\1\55\1\64\6\55\1\65"+
    "\1\66\1\0\3\55\1\0\1\55\1\0\3\55\10\0"+
    "\1\55\13\0\2\55\1\0\5\55\1\0\1\55\1\67"+
    "\1\55\1\70\5\55\1\71\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\16\0\1\72\1\0\1\73"+
    "\4\0\1\74\46\0\2\55\1\0\1\75\1\55\1\76"+
    "\2\55\1\0\1\55\1\77\10\55\1\0\3\55\1\0"+
    "\1\55\1\0\3\55\10\0\1\55\13\0\2\55\1\0"+
    "\5\55\1\0\3\55\1\100\6\55\1\0\3\55\1\0"+
    "\1\55\1\0\3\55\10\0\1\55\13\0\2\55\1\0"+
    "\5\55\1\0\3\55\1\101\6\55\1\0\3\55\1\0"+
    "\1\55\1\0\3\55\10\0\1\55\13\0\2\55\1\0"+
    "\5\55\1\0\4\55\1\102\5\55\1\0\3\55\1\0"+
    "\1\55\1\0\3\55\10\0\1\55\13\0\2\55\1\0"+
    "\2\55\1\103\2\55\1\0\7\55\1\104\2\55\1\0"+
    "\3\55\1\0\1\55\1\0\3\55\10\0\1\55\13\0"+
    "\2\55\1\0\5\55\1\105\1\106\1\107\2\55\1\110"+
    "\5\55\1\0\3\55\1\0\1\55\1\0\3\55\10\0"+
    "\1\55\13\0\2\55\1\0\5\55\1\0\1\55\1\111"+
    "\10\55\1\0\3\55\1\0\1\55\1\0\3\55\10\0"+
    "\1\55\13\0\2\55\1\0\5\55\1\112\1\113\11\55"+
    "\1\0\3\55\1\0\1\55\1\0\3\55\10\0\1\55"+
    "\13\0\2\55\1\0\2\55\1\114\2\55\1\0\3\55"+
    "\1\115\6\55\1\0\3\55\1\0\1\55\1\0\3\55"+
    "\10\0\1\55\22\0\1\116\5\0\1\117\10\0\1\120"+
    "\32\0\2\55\1\0\4\55\1\121\1\0\4\55\1\122"+
    "\5\55\1\0\2\55\1\123\1\0\1\55\1\0\3\55"+
    "\10\0\1\55\13\0\2\55\1\0\5\55\1\0\3\55"+
    "\1\124\6\55\1\0\3\55\1\0\1\55\1\0\3\55"+
    "\10\0\1\55\13\0\2\55\1\0\5\55\1\0\11\55"+
    "\1\125\1\0\3\55\1\0\1\55\1\0\3\55\10\0"+
    "\1\55\13\0\2\55\1\0\1\55\1\126\3\55\1\0"+
    "\12\55\1\0\3\55\1\0\1\55\1\0\3\55\10\0"+
    "\1\55\51\0\1\127\4\0\1\130\1\131\60\0\1\132"+
    "\60\0\1\133\14\0\2\55\1\0\5\55\1\0\1\55"+
    "\1\134\10\55\1\0\3\55\1\0\1\55\1\0\3\55"+
    "\10\0\1\55\13\0\1\135\60\0\2\55\1\0\2\55"+
    "\1\136\2\55\1\0\12\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\13\0\2\55\1\0\5\55"+
    "\1\0\3\55\1\137\6\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\13\0\2\55\1\0\5\55"+
    "\1\0\1\55\1\140\10\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\13\0\2\55\1\0\5\55"+
    "\1\0\7\55\1\141\2\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\13\0\2\55\1\0\4\55"+
    "\1\142\1\0\12\55\1\0\3\55\1\0\1\55\1\0"+
    "\3\55\10\0\1\55\13\0\2\55\1\0\4\55\1\143"+
    "\1\0\12\55\1\0\3\55\1\0\1\55\1\0\3\55"+
    "\10\0\1\55\13\0\2\55\1\0\5\55\1\0\12\55"+
    "\1\0\3\55\1\0\1\55\1\0\3\55\10\0\1\144"+
    "\13\0\2\55\1\0\5\55\1\0\12\55\1\145\1\146"+
    "\2\55\1\0\1\55\1\0\3\55\10\0\1\55\13\0"+
    "\2\55\1\0\5\55\1\0\10\55\1\147\1\55\1\0"+
    "\3\55\1\0\1\55\1\0\3\55\10\0\1\55\13\0"+
    "\2\55\1\0\1\55\1\150\3\55\1\0\4\55\1\151"+
    "\5\55\1\0\3\55\1\0\1\55\1\0\3\55\10\0"+
    "\1\55\13\0\2\55\1\0\5\55\1\0\4\55\1\152"+
    "\5\55\1\0\3\55\1\0\1\55\1\0\3\55\10\0"+
    "\1\55\21\0\1\153\1\154\51\0\2\55\1\0\3\55"+
    "\1\155\1\156\1\0\12\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\13\0\2\55\1\0\5\55"+
    "\1\157\1\160\1\161\10\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\13\0\2\55\1\0\4\55"+
    "\1\162\1\0\2\55\1\163\7\55\1\0\3\55\1\0"+
    "\1\55\1\0\3\55\10\0\1\55\13\0\2\55\1\0"+
    "\5\55\1\0\5\55\1\164\4\55\1\0\3\55\1\0"+
    "\1\55\1\0\3\55\10\0\1\55\13\0\2\55\1\0"+
    "\5\55\1\0\12\55\1\165\1\166\2\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\47\0\1\167\24\0\2\55"+
    "\1\0\5\55\1\0\12\55\1\0\3\55\1\0\1\55"+
    "\1\0\2\55\1\170\10\0\1\55\13\0\2\55\1\0"+
    "\5\55\1\0\12\55\1\0\2\55\1\171\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\13\0\2\55\1\0\3\55"+
    "\1\172\1\55\1\0\12\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\13\0\2\55\1\0\5\55"+
    "\1\0\1\55\1\173\10\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\36\0\2\174\34\0\2\55"+
    "\1\0\5\55\1\0\12\55\1\174\1\175\2\55\1\0"+
    "\1\55\1\0\3\55\10\0\1\55\13\0\2\55\1\0"+
    "\5\55\1\0\5\55\1\176\4\55\1\0\3\55\1\0"+
    "\1\55\1\0\3\55\10\0\1\55\13\0\2\55\1\0"+
    "\5\55\1\0\3\55\1\177\6\55\1\0\3\55\1\0"+
    "\1\55\1\0\3\55\10\0\1\55\27\0\1\200\4\0"+
    "\1\201\46\0\1\202\61\0\2\203\47\0\2\55\1\0"+
    "\5\55\1\0\3\55\1\204\4\55\1\205\1\55\1\0"+
    "\3\55\1\0\1\55\1\0\3\55\10\0\1\55\13\0"+
    "\2\55\1\0\4\55\1\206\1\0\12\55\1\0\3\55"+
    "\1\0\1\55\1\0\3\55\10\0\1\55\13\0\2\55"+
    "\1\0\5\55\1\203\1\207\11\55\1\0\3\55\1\0"+
    "\1\55\1\0\3\55\10\0\1\55\13\0\2\55\1\0"+
    "\5\55\1\0\10\55\1\210\1\55\1\0\3\55\1\0"+
    "\1\55\1\0\3\55\10\0\1\55\13\0\2\55\1\0"+
    "\5\55\1\211\1\212\11\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\13\0\2\55\1\0\5\55"+
    "\1\0\4\55\1\213\5\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\13\0\2\55\1\0\5\55"+
    "\1\0\5\55\1\214\4\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\13\0\2\55\1\0\3\55"+
    "\1\215\1\55\1\0\12\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\13\0\2\55\1\0\5\55"+
    "\1\0\10\55\1\216\1\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\13\0\2\55\1\0\5\55"+
    "\1\0\12\55\1\217\1\220\2\55\1\0\1\55\1\0"+
    "\3\55\10\0\1\55\13\0\2\55\1\0\5\55\1\221"+
    "\1\222\11\55\1\0\3\55\1\0\1\55\1\0\3\55"+
    "\10\0\1\55\30\0\1\223\43\0\2\55\1\0\5\55"+
    "\1\0\4\55\1\224\5\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\13\0\2\55\1\0\5\55"+
    "\1\0\3\55\1\225\6\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\13\0\2\55\1\0\5\55"+
    "\1\0\4\55\1\226\5\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\13\0\2\55\1\0\5\55"+
    "\1\0\4\55\1\227\5\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\13\0\2\55\1\0\2\55"+
    "\1\230\2\55\1\0\12\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\20\0\1\231\53\0\2\55"+
    "\1\0\2\55\1\232\2\55\1\0\12\55\1\0\3\55"+
    "\1\0\1\55\1\0\3\55\10\0\1\55\13\0\2\55"+
    "\1\0\3\55\1\233\1\55\1\0\12\55\1\0\3\55"+
    "\1\0\1\55\1\0\3\55\10\0\1\55\13\0\2\55"+
    "\1\0\1\55\1\234\3\55\1\0\12\55\1\0\3\55"+
    "\1\0\1\55\1\0\3\55\10\0\1\55\13\0\2\55"+
    "\1\0\5\55\1\0\4\55\1\235\5\55\1\0\3\55"+
    "\1\0\1\55\1\0\3\55\10\0\1\55\13\0\2\55"+
    "\1\0\5\55\1\0\12\55\1\0\3\55\1\236\1\55"+
    "\1\0\3\55\10\0\1\55\30\0\1\237\43\0\2\55"+
    "\1\0\5\55\1\0\4\55\1\240\5\55\1\0\3\55"+
    "\1\0\1\55\1\0\3\55\10\0\1\55\13\0\2\55"+
    "\1\0\2\55\1\241\2\55\1\0\12\55\1\0\3\55"+
    "\1\0\1\55\1\0\3\55\10\0\1\55\13\0\2\55"+
    "\1\0\5\55\1\0\7\55\1\242\2\55\1\0\3\55"+
    "\1\0\1\55\1\0\3\55\10\0\1\55\22\0\1\243"+
    "\51\0\2\55\1\0\4\55\1\244\1\0\12\55\1\0"+
    "\3\55\1\0\1\55\1\0\3\55\10\0\1\55\13\0"+
    "\2\55\1\0\5\55\1\0\10\55\1\245\1\55\1\0"+
    "\3\55\1\0\1\55\1\0\3\55\10\0\1\55\23\0"+
    "\2\246\55\0\1\247\61\0\1\250\51\0\2\55\1\0"+
    "\5\55\1\246\1\251\11\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\13\0\2\55\1\0\3\55"+
    "\1\252\1\55\1\0\12\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\13\0\2\55\1\0\4\55"+
    "\1\253\1\0\12\55\1\0\3\55\1\0\1\55\1\0"+
    "\3\55\10\0\1\55\13\0\2\55\1\0\5\55\1\0"+
    "\2\55\1\254\7\55\1\0\3\55\1\0\1\55\1\0"+
    "\3\55\10\0\1\55\33\0\1\255\40\0\2\55\1\0"+
    "\5\55\1\0\7\55\1\256\2\55\1\0\3\55\1\0"+
    "\1\55\1\0\3\55\10\0\1\55\13\0\2\55\1\0"+
    "\5\55\1\0\12\55\1\0\3\55\1\0\1\55\1\0"+
    "\2\55\1\257\10\0\1\55\13\0\2\55\1\0\4\55"+
    "\1\260\1\0\12\55\1\0\3\55\1\0\1\55\1\0"+
    "\3\55\10\0\1\55\13\0\2\55\1\0\4\55\1\261"+
    "\1\0\12\55\1\0\3\55\1\0\1\55\1\0\3\55"+
    "\10\0\1\55\30\0\1\262\43\0\2\55\1\0\5\55"+
    "\1\0\4\55\1\263\5\55\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\33\0\1\264\40\0\2\55"+
    "\1\0\5\55\1\0\7\55\1\265\2\55\1\0\3\55"+
    "\1\0\1\55\1\0\3\55\10\0\1\55\42\0\1\266"+
    "\31\0\2\55\1\0\5\55\1\0\12\55\1\0\3\55"+
    "\1\266\1\55\1\0\3\55\10\0\1\55\22\0\1\267"+
    "\51\0\2\55\1\0\4\55\1\270\1\0\12\55\1\0"+
    "\3\55\1\0\1\55\1\0\3\55\10\0\1\55\13\0"+
    "\2\55\1\0\5\55\1\0\4\55\1\271\5\55\1\0"+
    "\3\55\1\0\1\55\1\0\3\55\10\0\1\55\13\0"+
    "\2\55\1\0\5\55\1\0\3\55\1\272\6\55\1\0"+
    "\3\55\1\0\1\55\1\0\3\55\10\0\1\55\13\0"+
    "\2\55\1\0\5\55\1\0\10\55\1\273\1\55\1\0"+
    "\3\55\1\0\1\55\1\0\3\55\10\0\1\55\21\0"+
    "\1\274\1\0\2\275\47\0\2\55\1\0\4\55\1\276"+
    "\1\0\12\55\1\0\3\55\1\0\1\55\1\0\3\55"+
    "\10\0\1\55\13\0\2\55\1\0\5\55\1\0\4\55"+
    "\1\277\5\55\1\0\3\55\1\0\1\55\1\0\3\55"+
    "\10\0\1\55\13\0\2\55\1\0\5\55\1\0\12\55"+
    "\1\0\3\55\1\0\1\300\1\0\3\55\10\0\1\55"+
    "\20\0\1\301\104\0\2\302\34\0\1\303\52\0\2\55"+
    "\1\0\2\55\1\304\2\55\1\0\12\55\1\0\3\55"+
    "\1\0\1\55\1\0\3\55\10\0\1\55\13\0\2\55"+
    "\1\0\5\55\1\0\12\55\1\0\3\55\1\0\1\55"+
    "\1\302\1\305\2\55\10\0\1\55\13\0\2\55\1\0"+
    "\3\55\1\306\1\55\1\0\12\55\1\0\3\55\1\0"+
    "\1\55\1\0\3\55\10\0\1\55\13\0\2\55\1\0"+
    "\5\55\1\0\11\55\1\307\1\0\3\55\1\0\1\55"+
    "\1\0\3\55\10\0\1\55\30\0\1\310\43\0\2\55"+
    "\1\0\5\55\1\0\4\55\1\311\5\55\1\0\3\55"+
    "\1\0\1\55\1\0\3\55\10\0\1\55\13\0\2\55"+
    "\1\0\5\55\1\0\4\55\1\312\5\55\1\0\3\55"+
    "\1\0\1\55\1\0\3\55\10\0\1\55\13\0\2\55"+
    "\1\0\5\55\1\313\1\314\11\55\1\0\3\55\1\0"+
    "\1\55\1\0\3\55\10\0\1\55\25\0\1\315\46\0"+
    "\2\55\1\0\5\55\1\0\5\55\1\316\4\55\1\0"+
    "\3\55\1\0\1\55\1\0\3\55\10\0\1\55\13\0"+
    "\2\55\1\0\2\55\1\317\2\55\1\0\12\55\1\0"+
    "\3\55\1\0\1\55\1\0\3\55\10\0\1\55\13\0"+
    "\2\55\1\0\4\55\1\320\1\0\12\55\1\0\3\55"+
    "\1\0\1\55\1\0\3\55\10\0\1\55\34\0\1\321"+
    "\42\0\1\322\55\0\2\55\1\0\5\55\1\0\1\55"+
    "\1\323\10\55\1\0\3\55\1\0\1\55\1\0\3\55"+
    "\10\0\1\55\13\0\2\55\1\0\5\55\1\0\10\55"+
    "\1\324\1\55\1\0\3\55\1\0\1\55\1\0\3\55"+
    "\10\0\1\55\40\0\1\325\55\0\1\326\36\0\2\55"+
    "\1\0\5\55\1\0\12\55\1\0\1\55\1\327\1\55"+
    "\1\0\1\55\1\0\3\55\10\0\1\55\13\0\2\55"+
    "\1\0\5\55\1\0\11\55\1\330\1\0\3\55\1\0"+
    "\1\55\1\0\3\55\10\0\1\55\25\0\1\331\46\0"+
    "\2\55\1\0\5\55\1\0\1\55\1\332\10\55\1\0"+
    "\3\55\1\0\1\55\1\0\3\55\10\0\1\55\16\0"+
    "\1\333\55\0\2\55\1\0\1\55\1\334\3\55\1\0"+
    "\12\55\1\0\3\55\1\0\1\55\1\0\3\55\10\0"+
    "\1\55\36\0\2\335\34\0\2\55\1\0\2\55\1\336"+
    "\2\55\1\0\12\55\1\0\3\55\1\0\1\55\1\0"+
    "\3\55\10\0\1\55\20\0\1\337\53\0\2\55\1\0"+
    "\2\55\1\340\2\55\1\0\12\55\1\0\3\55\1\0"+
    "\1\55\1\0\3\55\10\0\1\55\13\0\2\55\1\0"+
    "\5\55\1\0\3\55\1\341\6\55\1\0\3\55\1\0"+
    "\1\55\1\0\3\55\10\0\1\55\30\0\1\342\43\0"+
    "\2\55\1\0\5\55\1\0\4\55\1\343\5\55\1\0"+
    "\3\55\1\0\1\55\1\0\3\55\10\0\1\55\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7301];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\1\11\1\1\5\11\4\1\10\11"+
    "\1\1\1\0\15\1\1\11\1\0\1\11\10\1\1\0"+
    "\4\1\1\0\3\1\3\0\6\1\5\11\11\1\1\0"+
    "\5\1\2\11\2\1\1\0\5\1\1\0\1\1\1\11"+
    "\4\1\1\0\3\1\2\0\1\11\1\0\5\1\1\0"+
    "\5\1\1\0\1\1\1\0\1\1\1\0\5\1\1\0"+
    "\4\1\1\0\1\11\3\1\1\11\2\1\3\0\4\1"+
    "\1\0\4\1\1\11\1\1\1\11\1\1\1\0\1\11"+
    "\4\1\2\0\3\1\1\0\1\11\1\0\4\1\1\11"+
    "\2\1\1\0\1\1\1\0\3\1\1\0\1\11\2\1"+
    "\2\11\2\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
//-----> Codigo de usuario en sintaxis java
public String showResult = "";
 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Symbols.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("\nError Lexico: "+yytext()+" Linea: "+yyline+" Columna: "+yycolumn); showResult += "\n Error Lexico: " + yytext() + " Linea: " + (yyline+1)  + " Columna: " + (yycolumn+1) + "\n";
            }
          case 71: break;
          case 2: 
            { System.out.println("Token "+yytext()+" digito"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.digito, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 3: 
            { System.out.println("Token "+yytext()+" letra"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.letra, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 4: 
            { System.out.println("Token correcto: "+yytext()+" parametro_entrada"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.parametro_entrada, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 5: 
            { System.out.println("Token correcto: "+yytext()+" parametro_salida"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.parametro_salida, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 6: 
            { /* Espacios en blanco, se ignoran */
            }
          case 76: break;
          case 7: 
            { System.out.println("Token correcto: "+yytext()+" suma"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.suma, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 8: 
            { System.out.println("Token correcto: "+yytext()+" resta"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.resta, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 9: 
            { System.out.println("Token correcto: "+yytext()+" multiplicacion"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.multiplicacion, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 10: 
            { System.out.println("Token correcto: "+yytext()+" division"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.division, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 11: 
            { System.out.println("Token correcto: "+yytext()+" potencia"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.potencia, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 12: 
            { System.out.println("Token correcto: "+yytext()+" menor"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.menor, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 13: 
            { System.out.println("Token correcto: "+yytext()+" mayor"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.mayor, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 14: 
            { System.out.println("Token correcto: "+yytext()+" comentario"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.comentario, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 15: 
            { System.out.println("Token correcto: "+yytext()+" parentesisabre"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.parentesis_abierto, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 16: 
            { System.out.println("Token correcto: "+yytext()+" parentesiscierra"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.parentesis_cerrado, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 17: 
            { System.out.println("Token correcto: "+yytext()+" llaveabre"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.llave_abierta, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 18: 
            { System.out.println("Token correcto: "+yytext()+" llavecierra"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.llave_cerrada, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 19: 
            { System.out.println("Token correcto: "+yytext()+" corcheteabre"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.corchete_abierto, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 20: 
            { System.out.println("Token correcto: "+yytext()+" corchetecierra"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.corchete_cerrado, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 21: 
            { System.out.println("Token correcto: "+yytext()+" coma"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.coma, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 22: 
            { System.out.println("Token "+yytext()+" enero"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.entero, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 23: 
            { System.out.println("Token "+yytext()+" id"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.id, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 24: 
            { System.out.println("Token correcto: "+yytext()+" hasta"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.hasta, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 25: 
            { System.out.println("Token correcto: "+yytext()+" condicional_if"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.condicional_if, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 26: 
            { System.out.println("Token correcto: "+yytext()+" parametro_entada_salida"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.parametro_entada_salida, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 27: 
            { System.out.println("Token correcto: "+yytext()+" o logico"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.or, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 28: 
            { System.out.println("Token correcto: "+yytext()+" hacer"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.hacer, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 29: 
            { System.out.println("Token correcto: "+yytext()+" asignacion"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.asignacion, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 30: 
            { System.out.println("Token correcto: "+yytext()+" diferente"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.diferente, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 31: 
            { System.out.println("Token correcto: "+yytext()+" menor igual"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.menor_igual, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 32: 
            { System.out.println("Token correcto: "+yytext()+" mayor igual"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.mayor_igual, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 33: 
            { System.out.println("Token correcto: "+yytext()+" comparacion"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.comparacion, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 34: 
            { System.out.println("Token "+yytext()+" numero"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.numero, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 35: 
            { System.out.println("Token correcto: "+yytext()+" ciclo_for"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.ciclo_for, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 36: 
            { System.out.println("Token correcto: "+yytext()+" no logico"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.not, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 37: 
            { System.out.println("Token correcto: "+yytext()+" comilla"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.comilla, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 38: 
            { System.out.println("Token correcto: "+yytext()+" incremento"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.incremento, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 39: 
            { System.out.println("Token correcto: "+yytext()+" int"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.int_type, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 40: 
            { System.out.println("Token correcto: "+yytext()+" division entera"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.division, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 41: 
            { System.out.println("Token correcto: "+yytext()+" decremento"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.decremento, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 42: 
            { System.out.println("Token correcto: "+yytext()+" y logico"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.and, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 43: 
            { System.out.println("Token correcto: "+yytext()+" set"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.set, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 44: 
            { System.out.println("Token correcto: "+yytext()+" modulo"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.modulo, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 45: 
            { System.out.println("Token correcto: "+yytext()+" char"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.char_type, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 46: 
            { System.out.println("Token correcto: "+yytext()+" verdadero"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.verdadero , yycolumn, yyline, yytext());
            }
          case 116: break;
          case 47: 
            { System.out.println("Token correcto: "+yytext()+" tree"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.tree, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 48: 
            { System.out.println("Token correcto: "+yytext()+" then"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.then, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 49: 
            { System.out.println("Token correcto: "+yytext()+" else"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.else_if, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 50: 
            { System.out.println("Token correcto: "+yytext()+" list"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.list, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 51: 
            { System.out.println("Token correcto: "+yytext()+" float"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.float_type, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 52: 
            { System.out.println("Token correcto: "+yytext()+" falso"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.falso, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 53: 
            { System.out.println("Token correcto: "+yytext()+" condicional_until"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.condicional_until, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 54: 
            { System.out.println("Token correcto: "+yytext()+" imprimir"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.imprimir, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 55: 
            { System.out.println("Token correcto: "+yytext()+" array"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.array , yycolumn, yyline, yytext());
            }
          case 125: break;
          case 56: 
            { System.out.println("Token correcto: "+yytext()+" stack"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.stack, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 57: 
            { System.out.println("Token correcto: "+yytext()+" graph"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.graph, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 58: 
            { System.out.println("Token correcto: "+yytext()+" ciclo_while"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.ciclo_while, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 59: 
            { System.out.println("Token correcto: "+yytext()+" queve"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.queve, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 60: 
            { System.out.println("Token correcto: "+yytext()+" retorno"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.retorno, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 61: 
            { System.out.println("Token correcto: "+yytext()+" ciclo_repeat"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.ciclo_repeat, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 62: 
            { System.out.println("Token correcto: "+yytext()+" end if"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.end_if, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 63: 
            { System.out.println("Token correcto: "+yytext()+" descenso"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.descenso, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 64: 
            { System.out.println("Token correcto: "+yytext()+" string"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.string_type, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 65: 
            { System.out.println("Token correcto: "+yytext()+" condicional_switch"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.condicional_switch, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 66: 
            { System.out.println("Token correcto: "+yytext()+" case of"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.case_of, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 67: 
            { System.out.println("Token correcto: "+yytext()+" boolean_type"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.boolean_type, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 68: 
            { System.out.println("Token correcto: "+yytext()+" function"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.function, yycolumn, yyline, yytext());
            }
          case 138: break;
          case 69: 
            { System.out.println("Token correcto: "+yytext()+" end case"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.end_case, yycolumn, yyline, yytext());
            }
          case 139: break;
          case 70: 
            { System.out.println("Token correcto: "+yytext()+" procedure"); showResult += "Token correcto: " +yytext()+" Linea: " + (yyline+1) + " columna: "+ (yycolumn+1) + " \n"; return new Symbol(Symbols.procedure, yycolumn, yyline, yytext());
            }
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
