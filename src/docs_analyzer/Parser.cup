/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes
package Models;
import java_cup.runtime.Symbol;


//------> Codigo para el parser,variables, metodos
parser code
{:
    public String result="";
    String temporal = "" ; 
    String temporal2="";
    String temporal3="";
    String temporalvalor="";
    String envget="false";
    String enviaset="false";
    String hereda="";
    String guardo="";
    String consulta="";
    String valorsigno="";
    String valoracceder="";
    String valoraccederid="";
    String serialcondicion="";
    String insertarvalores="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        result +="\n!!!!!!! Error Sintactico Recuperado !!!!!!!\t\tLexema: "+lexema+"\t\tFila: "+fila+"\t\tColumna: "+columna;
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        result +="\n!!!!!!! Error Sintactico, Panic Mode !!!!!!!\t\tLexema: "+lexema+"\t\tFila: "+fila+"\t\tColumna: "+columna;
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
     
    }
:}

//------> Codigo para las acciones gramaticales
action code
{:
:}

/*--------------- 2da Area: Declaraciones -----------------------*/
//------> declaracion de terminales 
terminal function, procedure, boolean_type , int_type , float_type , char_type , string_type , retorno , verdadero , falso ;
terminal parametro_entrada , parametro_salida , parametro_entada_salida , ciclo_for , ciclo_while , ciclo_repeat , condicional_if ;
terminal condicional_switch , condicional_until , then , else_if  , end_if , case_of , end_case , array , list , stack , queve ;
terminal tree , graph , set , suma , resta , multiplicacion , division , potencia , menor  , mayor , comparacion , menor_igual ;
terminal mayor_igual , division_entera , modulo , diferente , or , and , not , comentario , asignacion , parentesis_abierto ;
terminal parentesis_cerrado , llave_abierta , llave_cerrada , corchete_abierto , corchete_cerrado , coma , hasta , hacer , incremento ;
terminal decremento , descenso , imprimir , digito , letra , entero , numero , id , comilla ;






//------> declaracion de no terminales   


non terminal INICIO, ARGUMENTOS , DEFVARIABLES , CUERPITO , REFERENCIA , TIPODATO , VECTOR ,  ESTRUCTURA ,  ELEMENTOS , MATRIZ       ;

start with INICIO;






/*--------------- 3ra Area: Reglas Semanticas -----------------------*/

INICIO ::=    procedure id parentesis_abierto ARGUMENTOS parentesis_cerrado DEFVARIABLES llave_abierta CUERPITO llave_cerrada 
            | function id parentesis_abierto ARGUMENTOS parentesis_cerrado DEFVARIABLES llave_abierta CUERPITO llave_cerrada
            | procedure id parentesis_abierto  parentesis_cerrado DEFVARIABLES llave_abierta CUERPITO llave_cerrada
            | function id parentesis_abierto  parentesis_cerrado DEFVARIABLES llave_abierta CUERPITO llave_cerrada
            | procedure id parentesis_abierto ARGUMENTOS parentesis_cerrado  llave_abierta CUERPITO llave_cerrada
            | function id parentesis_abierto ARGUMENTOS parentesis_cerrado  llave_abierta CUERPITO llave_cerrada
            | procedure id parentesis_abierto  parentesis_cerrado  llave_abierta CUERPITO llave_cerrada
            | function id parentesis_abierto  parentesis_cerrado  llave_abierta CUERPITO llave_cerrada 
            | procedure id parentesis_abierto ARGUMENTOS parentesis_cerrado DEFVARIABLES llave_abierta CUERPITO llave_cerrada INICIO
            | function id parentesis_abierto ARGUMENTOS parentesis_cerrado DEFVARIABLES llave_abierta CUERPITO llave_cerrada INICIO
            | procedure id parentesis_abierto  parentesis_cerrado DEFVARIABLES llave_abierta CUERPITO llave_cerrada INICIO
            | function id parentesis_abierto  parentesis_cerrado DEFVARIABLES llave_abierta CUERPITO llave_cerrada INICIO
            | procedure id parentesis_abierto ARGUMENTOS parentesis_cerrado  llave_abierta CUERPITO llave_cerrada INICIO
            | function id parentesis_abierto ARGUMENTOS parentesis_cerrado  llave_abierta CUERPITO llave_cerrada INICIO
            | procedure id parentesis_abierto  parentesis_cerrado  llave_abierta CUERPITO llave_cerrada INICIO
            | function id parentesis_abierto  parentesis_cerrado  llave_abierta CUERPITO llave_cerrada INICIO ;

ARGUMENTOS ::= REFERENCIA TIPODATO id coma ARGUMENTOS 
              | REFERENCIA TIPODATO id ;

REFERENCIA ::= parametro_entrada | parametro_salida | parametro_entada_salida ; 



ELEMENTOS ::= entero coma ELEMENTOS | entero |  comilla id comilla | comilla id comilla coma ELEMENTOS | id coma ELEMENTOS ;

ESTRUCTURA ::= VECTOR | MATRIZ ;

TIPODATO ::= int_type | char_type | float_type | boolean_type | string_type | ESTRUCTURA ;



VECTOR ::=   TIPODATO id corchete_abierto corchete_cerrado 
           | TIPODATO id corchete_abierto entero corchete_cerrado 
           | TIPODATO id corchete_abierto id corchete_cerrado 
           | TIPODATO id corchete_abierto  corchete_cerrado asignacion llave_abierta ELEMENTOS llave_cerrada  ;

MATRIZ ::=id ;

DEFVARIABLES ::=id ;


CUERPITO ::= id id ;

